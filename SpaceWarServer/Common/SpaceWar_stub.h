  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "SpaceWar_common.h"

     
namespace SpaceWar
{
	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestServerConnect ( ::Proud::HostID, ::Proud::RmiContext& ,  const string & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_RequestServerConnect bool RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id) PN_OVERRIDE

#define DEFRMI_SpaceWar_RequestServerConnect(DerivedClass) bool DerivedClass::RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id)
#define CALL_SpaceWar_RequestServerConnect RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id)
#define PARAM_SpaceWar_RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id)
               
		virtual bool RequestClientJoin ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_RequestClientJoin bool RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z) PN_OVERRIDE

#define DEFRMI_SpaceWar_RequestClientJoin(DerivedClass) bool DerivedClass::RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
#define CALL_SpaceWar_RequestClientJoin RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
#define PARAM_SpaceWar_RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
               
		virtual bool RequestWorldCreateItem ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_RequestWorldCreateItem bool RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) PN_OVERRIDE

#define DEFRMI_SpaceWar_RequestWorldCreateItem(DerivedClass) bool DerivedClass::RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define CALL_SpaceWar_RequestWorldCreateItem RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define PARAM_SpaceWar_RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
               
		virtual bool NotifyLoginSuccess ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyLoginSuccess bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyLoginSuccess(DerivedClass) bool DerivedClass::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
#define CALL_SpaceWar_NotifyLoginSuccess NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
#define PARAM_SpaceWar_NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
               
		virtual bool NotifyLoginFailed ( ::Proud::HostID, ::Proud::RmiContext& ,  const string & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyLoginFailed bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyLoginFailed(DerivedClass) bool DerivedClass::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason)
#define CALL_SpaceWar_NotifyLoginFailed NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason)
#define PARAM_SpaceWar_NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason)
               
		virtual bool NotifyOtherClientJoin ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyOtherClientJoin bool NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyOtherClientJoin(DerivedClass) bool DerivedClass::NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
#define CALL_SpaceWar_NotifyOtherClientJoin NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
#define PARAM_SpaceWar_NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)
               
		virtual bool NotifyPlayerLost ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerLost bool NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerLost(DerivedClass) bool DerivedClass::NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
#define CALL_SpaceWar_NotifyPlayerLost NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
#define PARAM_SpaceWar_NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)
               
		virtual bool NotifyPlayerMove ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerMove bool NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerMove(DerivedClass) bool DerivedClass::NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)
#define CALL_SpaceWar_NotifyPlayerMove NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)
#define PARAM_SpaceWar_NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)
               
		virtual bool NotifyDeleteItem ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyDeleteItem bool NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyDeleteItem(DerivedClass) bool DerivedClass::NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID)
#define CALL_SpaceWar_NotifyDeleteItem NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID)
#define PARAM_SpaceWar_NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID)
               
		virtual bool NotifyCreateItem ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyCreateItem bool NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyCreateItem(DerivedClass) bool DerivedClass::NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define CALL_SpaceWar_NotifyCreateItem NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define PARAM_SpaceWar_NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
               
		virtual bool NotifyPlayerEquipItem ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerEquipItem bool NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerEquipItem(DerivedClass) bool DerivedClass::NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID)
#define CALL_SpaceWar_NotifyPlayerEquipItem NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID)
#define PARAM_SpaceWar_NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID)
               
		virtual bool NotifyPlayerUnEquipItem ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerUnEquipItem bool NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerUnEquipItem(DerivedClass) bool DerivedClass::NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define CALL_SpaceWar_NotifyPlayerUnEquipItem NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define PARAM_SpaceWar_NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
               
		virtual bool NotifyPlayerBulletCreate ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const string & ,  const Proud::Vector3 & ,  const Proud::Vector3 & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerBulletCreate bool NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerBulletCreate(DerivedClass) bool DerivedClass::NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define CALL_SpaceWar_NotifyPlayerBulletCreate NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
#define PARAM_SpaceWar_NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)
               
		virtual bool NotifyPlayerBulletMove ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ,  const Proud::Vector3 & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerBulletMove bool NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerBulletMove(DerivedClass) bool DerivedClass::NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)
#define CALL_SpaceWar_NotifyPlayerBulletMove NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)
#define PARAM_SpaceWar_NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)
               
		virtual bool NotifyPlayerAnimation ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const string & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerAnimation bool NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerAnimation(DerivedClass) bool DerivedClass::NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)
#define CALL_SpaceWar_NotifyPlayerAnimation NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)
#define PARAM_SpaceWar_NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)
               
		virtual bool NotifyPlayerDamage ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const string & ,  const string & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerDamage bool NotifyPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & recvHostID,  const string & name,  const string & weaponName,  const float & damage) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerDamage(DerivedClass) bool DerivedClass::NotifyPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & recvHostID,  const string & name,  const string & weaponName,  const float & damage)
#define CALL_SpaceWar_NotifyPlayerDamage NotifyPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & recvHostID,  const string & name,  const string & weaponName,  const float & damage)
#define PARAM_SpaceWar_NotifyPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & recvHostID,  const string & name,  const string & weaponName,  const float & damage)
               
		virtual bool NotifyPlayerChangeHP ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerChangeHP bool NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerChangeHP(DerivedClass) bool DerivedClass::NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp)
#define CALL_SpaceWar_NotifyPlayerChangeHP NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp)
#define PARAM_SpaceWar_NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp)
               
		virtual bool NotifyPlayerChangeOxygen ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & )		{ 
			return false;
		} 

#define DECRMI_SpaceWar_NotifyPlayerChangeOxygen bool NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen) PN_OVERRIDE

#define DEFRMI_SpaceWar_NotifyPlayerChangeOxygen(DerivedClass) bool DerivedClass::NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen)
#define CALL_SpaceWar_NotifyPlayerChangeOxygen NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen)
#define PARAM_SpaceWar_NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestServerConnect;
		static const PNTCHAR* RmiName_RequestClientJoin;
		static const PNTCHAR* RmiName_RequestWorldCreateItem;
		static const PNTCHAR* RmiName_NotifyLoginSuccess;
		static const PNTCHAR* RmiName_NotifyLoginFailed;
		static const PNTCHAR* RmiName_NotifyOtherClientJoin;
		static const PNTCHAR* RmiName_NotifyPlayerLost;
		static const PNTCHAR* RmiName_NotifyPlayerMove;
		static const PNTCHAR* RmiName_NotifyDeleteItem;
		static const PNTCHAR* RmiName_NotifyCreateItem;
		static const PNTCHAR* RmiName_NotifyPlayerEquipItem;
		static const PNTCHAR* RmiName_NotifyPlayerUnEquipItem;
		static const PNTCHAR* RmiName_NotifyPlayerBulletCreate;
		static const PNTCHAR* RmiName_NotifyPlayerBulletMove;
		static const PNTCHAR* RmiName_NotifyPlayerAnimation;
		static const PNTCHAR* RmiName_NotifyPlayerDamage;
		static const PNTCHAR* RmiName_NotifyPlayerChangeHP;
		static const PNTCHAR* RmiName_NotifyPlayerChangeOxygen;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const string & ) > RequestServerConnect_Function;
		virtual bool RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id) 
		{ 
			if (RequestServerConnect_Function==nullptr) 
				return true; 
			return RequestServerConnect_Function(remote,rmiContext, id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & ) > RequestClientJoin_Function;
		virtual bool RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z) 
		{ 
			if (RequestClientJoin_Function==nullptr) 
				return true; 
			return RequestClientJoin_Function(remote,rmiContext, hostID, name, x, y, z); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ) > RequestWorldCreateItem_Function;
		virtual bool RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) 
		{ 
			if (RequestWorldCreateItem_Function==nullptr) 
				return true; 
			return RequestWorldCreateItem_Function(remote,rmiContext, hostID, itemCID, itemID, pos, rot); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ) > NotifyLoginSuccess_Function;
		virtual bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID) 
		{ 
			if (NotifyLoginSuccess_Function==nullptr) 
				return true; 
			return NotifyLoginSuccess_Function(remote,rmiContext, hostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const string & ) > NotifyLoginFailed_Function;
		virtual bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason) 
		{ 
			if (NotifyLoginFailed_Function==nullptr) 
				return true; 
			return NotifyLoginFailed_Function(remote,rmiContext, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & ) > NotifyOtherClientJoin_Function;
		virtual bool NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z) 
		{ 
			if (NotifyOtherClientJoin_Function==nullptr) 
				return true; 
			return NotifyOtherClientJoin_Function(remote,rmiContext, hostID, name, x, y, z); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ) > NotifyPlayerLost_Function;
		virtual bool NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID) 
		{ 
			if (NotifyPlayerLost_Function==nullptr) 
				return true; 
			return NotifyPlayerLost_Function(remote,rmiContext, hostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ) > NotifyPlayerMove_Function;
		virtual bool NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz) 
		{ 
			if (NotifyPlayerMove_Function==nullptr) 
				return true; 
			return NotifyPlayerMove_Function(remote,rmiContext, hostID, name, curX, curY, curZ, velocityX, velocityY, velocityZ, crx, cry, crz, rx, ry, rz); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ) > NotifyDeleteItem_Function;
		virtual bool NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID) 
		{ 
			if (NotifyDeleteItem_Function==nullptr) 
				return true; 
			return NotifyDeleteItem_Function(remote,rmiContext, itemID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ) > NotifyCreateItem_Function;
		virtual bool NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) 
		{ 
			if (NotifyCreateItem_Function==nullptr) 
				return true; 
			return NotifyCreateItem_Function(remote,rmiContext, hostID, itemCID, itemID, pos, rot); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ) > NotifyPlayerEquipItem_Function;
		virtual bool NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID) 
		{ 
			if (NotifyPlayerEquipItem_Function==nullptr) 
				return true; 
			return NotifyPlayerEquipItem_Function(remote,rmiContext, hostID, itemCID, itemID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const int & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ) > NotifyPlayerUnEquipItem_Function;
		virtual bool NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) 
		{ 
			if (NotifyPlayerUnEquipItem_Function==nullptr) 
				return true; 
			return NotifyPlayerUnEquipItem_Function(remote,rmiContext, hostID, itemCID, itemID, pos, rot); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const string & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ) > NotifyPlayerBulletCreate_Function;
		virtual bool NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot) 
		{ 
			if (NotifyPlayerBulletCreate_Function==nullptr) 
				return true; 
			return NotifyPlayerBulletCreate_Function(remote,rmiContext, sendHostID, bulletType, bulletID, pos, rot); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ,  const Proud::Vector3 & ) > NotifyPlayerBulletMove_Function;
		virtual bool NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot) 
		{ 
			if (NotifyPlayerBulletMove_Function==nullptr) 
				return true; 
			return NotifyPlayerBulletMove_Function(remote,rmiContext, sendHostID, bulletID, pos, velocity, rot); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const string & ,  const int & ) > NotifyPlayerAnimation_Function;
		virtual bool NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue) 
		{ 
			if (NotifyPlayerAnimation_Function==nullptr) 
				return true; 
			return NotifyPlayerAnimation_Function(remote,rmiContext, hostID, name, animationName, aniValue); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const int & ,  const string & ,  const string & ,  const float & ) > NotifyPlayerDamage_Function;
		virtual bool NotifyPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & recvHostID,  const string & name,  const string & weaponName,  const float & damage) 
		{ 
			if (NotifyPlayerDamage_Function==nullptr) 
				return true; 
			return NotifyPlayerDamage_Function(remote,rmiContext, sendHostID, recvHostID, name, weaponName, damage); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ) > NotifyPlayerChangeHP_Function;
		virtual bool NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp) 
		{ 
			if (NotifyPlayerChangeHP_Function==nullptr) 
				return true; 
			return NotifyPlayerChangeHP_Function(remote,rmiContext, sendHostID, name, hp); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const string & ,  const float & ) > NotifyPlayerChangeOxygen_Function;
		virtual bool NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen) 
		{ 
			if (NotifyPlayerChangeOxygen_Function==nullptr) 
				return true; 
			return NotifyPlayerChangeOxygen_Function(remote,rmiContext, sendHostID, name, oxygen); 
		}

	};
#endif
}

