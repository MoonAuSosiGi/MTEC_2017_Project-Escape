rename cs(std::string, System.String);
rename cs(Proud::Vector3, UnityEngine.Vector3);
using(cs) Nettention.Proud;


/*

[임시코드]
첫번째 클라에서 생성 요청 ( 아이템 코드도 같이 보냄 ) -> 서버에서 수락
-> 다른 클라에게 샌드 

[정식 코드]
클라에서 생성 요청 (생성 안함) -> 서버에서 좌표, 회전 계산 후 아이디까지
클라에게 샌드
*/

[marshaler(cs)=SP_Marshaler]
global SpaceWar 3141
{
	//C2S -------------------------------------------------------------

	// Connect
	RequestServerConnect([in]string id);

	// Start Send
	RequestClientJoin([in]int hostID,[in]string name,[in]float x,[in]float y,[in]float z);
	
	// 월드에 아이템 생성 요청 //
	RequestWorldCreateItem([in]int hostID,[in]int itemCID,[in]int itemID,[in] Proud::Vector3 pos,[in]Proud::Vector3 rot);

	
	// 플레이어가 맞았다
	RequestPlayerDamage([in]int sendHostID,[in]int targetHostID,[in]string name,[in]string weaponName,[in]float damage);

	// 플레이어가 숨을쉬었다.
	RequestPlayerUseOxy([in]int sendHostID,[in]string name,[in]float useOxy);

	// 산소 충전기 조작
	RequestUseOxyCharger([in]int sendHostID,[in]int oxyChargerIndex,[in]float userOxy);

	// 아이템 박스 조작
	RequestUseItemBox([in]int sendHostID,[in]int itemBoxIndex);


	// 처음에 쉘터를 등록한다
	RequestShelterStartSetup([in]int shelterID);

	// 쉘터 문을 조작했다.
	RequestShelterDoorControl([in]int sendHostID,[in]int shelterID,[in]bool doorState);

	// 쉘터를 들어오고 나갔다 // false 면 나갔다
	RequestShelterEnter([in]int sendHostID,[in]int shelterID,[in]bool enter);

	//S2C -------------------------------------------------------------
	NotifyLoginSuccess([in]int hostID);
	NotifyLoginFailed([in]string reason);

	// Other Player join
	NotifyOtherClientJoin([in]int hostID,[in]string name,[in]float x,[in]float y,[in]float z);

	// 플레이어가 나갔다
	NotifyPlayerLost([in]int hostID);

	// 플레이어가 움직임
	NotifyPlayerMove([in]int hostID,[in]string name,[in]float curX,[in]float curY,[in]float curZ,
	[in]float velocityX,[in]float velocityY,[in]float velocityZ,
	[in]float crx,[in]float cry,[in]float crz,
	[in]float rx,[in]float ry, [in]float rz);

	// 월드 아이템 삭제
	NotifyDeleteItem([in]int itemID);

	// 아이템 생성하는 명령
	NotifyCreateItem([in]int hostID,[in]int itemCID,[in]int itemID,[in]Proud::Vector3 pos,[in]Proud::Vector3 rot);
	
	// 처음 접속시 산소 충전기의 상태를 전송하는 명령
	NotifyStartOxyChargerState([in]int oxyChargerID,[in]float oxy);

	// 처음 접속시 아이템 박스의 상태를 전송하는 명령
	NotifyStartItemBoxState([in]int itemBoxID,[in]bool openState);

	// 플레이어가 아이템을 먹었다. // 임시로 없음

	// 플레이어가 아이템을 장비했다.
	NotifyPlayerEquipItem([in]int hostID,[in]int itemCID,[in]int itemID);

	// 플레이어가 아이템을 해제했다.
	NotifyPlayerUnEquipItem([in]int hostID,[in]int itemCID,[in]int itemID,[in]Proud::Vector3 pos,[in]Proud::Vector3 rot);
	////NotifyPlayerUnEquipItem([in]int hostID,[in]int itemCID,[in]int itemID,[in]float x,[in]float y,[in]float z,[in]float rx,[in]float ry,[in]float rz);

	// 플레이어의 총알 생성
	NotifyPlayerBulletCreate([in]int sendHostID,[in]string bulletType,[in]string bulletID,[in]Proud::Vector3 pos,[in]Proud::Vector3 rot);

	// 플레이어의 총알 동기화
	NotifyPlayerBulletMove([in]int sendHostID,[in]string bulletID,[in]Proud::Vector3 pos,[in]Proud::Vector3 velocity,[in]Proud::Vector3 rot);

	// 플레이어의 총알 삭제 ( 어딘가에 부딪힘 플레이어도 포함 )
	NotifyPlayerBulletDelete([in]int sendHostID,[in]string bulletID);

	// 플레이어의 애니메이션 재생 // 누가 보냈는지 / 해당 플레이어 이름 /  애니메이션 이름 / 애니메이션 값
	NotifyPlayerAnimation([in]int hostID,[in]string name,[in]string animationName,[in]int aniValue);

	// 체력 변동 이벤트 (데미지는 여기서 처리되지 않는다.)
	NotifyPlayerChangeHP([in]int sendHostID,[in]string name,[in]float hp,[in]float prevhp,[in]float maxhp);

	// 산소 변동 이벤트
	NotifyPlayerChangeOxygen([in]int sendHostID,[in]string name,[in]float oxygen,[in]float prevoxy,[in]float maxoxy);

	// 산소충전기 조작
	NotifyUseOxyCharger([in]int sendHostID,[in]int oxyChargerIndex,[in]float userOxy);

	// 아이템 박스 조작
	NotifyUseItemBox([in]int sendHostID,[in]int itemBoxIndex,[in]int itemID);

	// 쉘터의 상태 정보
	NotifyShelterInfo([in]int sendHostID,[in]int shelterID,[in]bool doorState,[in]bool lightState);

	// 메테오 생성까지 남은 시간
	NotifyMeteorCreateTime([in]int time);

	// 메테오 생성해라
	NotifyMeteorCreate([in]float anglex,[in]float anglez);

	// 누군가가 우주선 조작중
	NotifySpaceShipEngineCharge([in]int spaceShipID,[in]float fuel);

	// RESULT -------------------------------------------------------------------------
	
	// 우주선 타서 연료 다채웠을 경우 보냄
	RequestSpaceShip([in]int winPlayerID);
	// 이것은 결과를 받아오는 것
	RequestGameEnd();

	// 킬 / 어시스트 마다 제공되는 정보
	NotifyKillInfo([in]string targetName,[in]bool kill,[in]int totalKill,[in]int totalAssist);
	
	// 최종 결과 - 내 정보
	NotifyGameResultInfoMe([in]string gameMode,[in]int winState,[in]int playTime,[in]int kills,[in]int assists,[in]int death,[in]int getMoney); 
	NotifyGameResultInfoOther([in]string name,[in]int state);
	NotifyGameResultShow();
}