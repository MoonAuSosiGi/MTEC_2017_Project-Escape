




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "SpaceWar_proxy.h"

namespace SpaceWar
{
        
	bool Proxy::RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerConnect;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestServerConnect, (::Proud::RmiID)Rmi_RequestServerConnect);
	}

	bool Proxy::RequestServerConnect ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerConnect;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestServerConnect, (::Proud::RmiID)Rmi_RequestServerConnect);
	}
        
	bool Proxy::RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestClientJoin, (::Proud::RmiID)Rmi_RequestClientJoin);
	}

	bool Proxy::RequestClientJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestClientJoin, (::Proud::RmiID)Rmi_RequestClientJoin);
	}
        
	bool Proxy::RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestWorldCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestWorldCreateItem, (::Proud::RmiID)Rmi_RequestWorldCreateItem);
	}

	bool Proxy::RequestWorldCreateItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestWorldCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestWorldCreateItem, (::Proud::RmiID)Rmi_RequestWorldCreateItem);
	}
        
	bool Proxy::RequestPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & targetHostID,  const string & name,  const string & weaponName,  const float & damage)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerDamage;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << targetHostID;
__msg << name;
__msg << weaponName;
__msg << damage;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestPlayerDamage, (::Proud::RmiID)Rmi_RequestPlayerDamage);
	}

	bool Proxy::RequestPlayerDamage ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & targetHostID,  const string & name,  const string & weaponName,  const float & damage)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerDamage;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << targetHostID;
__msg << name;
__msg << weaponName;
__msg << damage;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestPlayerDamage, (::Proud::RmiID)Rmi_RequestPlayerDamage);
	}
        
	bool Proxy::RequestPlayerUseOxy ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & useOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerUseOxy;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << useOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestPlayerUseOxy, (::Proud::RmiID)Rmi_RequestPlayerUseOxy);
	}

	bool Proxy::RequestPlayerUseOxy ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & useOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerUseOxy;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << useOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestPlayerUseOxy, (::Proud::RmiID)Rmi_RequestPlayerUseOxy);
	}
        
	bool Proxy::RequestUseOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseOxyCharger, (::Proud::RmiID)Rmi_RequestUseOxyCharger);
	}

	bool Proxy::RequestUseOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseOxyCharger, (::Proud::RmiID)Rmi_RequestUseOxyCharger);
	}
        
	bool Proxy::RequestUseItemBox ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & itemBoxIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseItemBox, (::Proud::RmiID)Rmi_RequestUseItemBox);
	}

	bool Proxy::RequestUseItemBox ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & itemBoxIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseItemBox, (::Proud::RmiID)Rmi_RequestUseItemBox);
	}
        
	bool Proxy::RequestShelterStartSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & shelterID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterStartSetup;
__msg.Write(__msgid); 
	
__msg << shelterID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterStartSetup, (::Proud::RmiID)Rmi_RequestShelterStartSetup);
	}

	bool Proxy::RequestShelterStartSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & shelterID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterStartSetup;
__msg.Write(__msgid); 
	
__msg << shelterID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterStartSetup, (::Proud::RmiID)Rmi_RequestShelterStartSetup);
	}
        
	bool Proxy::RequestShelterDoorControl ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & doorState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterDoorControl;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterDoorControl, (::Proud::RmiID)Rmi_RequestShelterDoorControl);
	}

	bool Proxy::RequestShelterDoorControl ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & doorState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterDoorControl;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterDoorControl, (::Proud::RmiID)Rmi_RequestShelterDoorControl);
	}
        
	bool Proxy::RequestShelterEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & enter)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterEnter;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << enter;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterEnter, (::Proud::RmiID)Rmi_RequestShelterEnter);
	}

	bool Proxy::RequestShelterEnter ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & enter)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterEnter;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << enter;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterEnter, (::Proud::RmiID)Rmi_RequestShelterEnter);
	}
        
	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}

	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}
        
	bool Proxy::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}

	bool Proxy::NotifyLoginFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}
        
	bool Proxy::NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyOtherClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyOtherClientJoin, (::Proud::RmiID)Rmi_NotifyOtherClientJoin);
	}

	bool Proxy::NotifyOtherClientJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyOtherClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyOtherClientJoin, (::Proud::RmiID)Rmi_NotifyOtherClientJoin);
	}
        
	bool Proxy::NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerLost;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerLost, (::Proud::RmiID)Rmi_NotifyPlayerLost);
	}

	bool Proxy::NotifyPlayerLost ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerLost;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerLost, (::Proud::RmiID)Rmi_NotifyPlayerLost);
	}
        
	bool Proxy::NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerMove;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << curX;
__msg << curY;
__msg << curZ;
__msg << velocityX;
__msg << velocityY;
__msg << velocityZ;
__msg << crx;
__msg << cry;
__msg << crz;
__msg << rx;
__msg << ry;
__msg << rz;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerMove, (::Proud::RmiID)Rmi_NotifyPlayerMove);
	}

	bool Proxy::NotifyPlayerMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerMove;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << curX;
__msg << curY;
__msg << curZ;
__msg << velocityX;
__msg << velocityY;
__msg << velocityZ;
__msg << crx;
__msg << cry;
__msg << crz;
__msg << rx;
__msg << ry;
__msg << rz;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerMove, (::Proud::RmiID)Rmi_NotifyPlayerMove);
	}
        
	bool Proxy::NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeleteItem;
__msg.Write(__msgid); 
	
__msg << itemID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeleteItem, (::Proud::RmiID)Rmi_NotifyDeleteItem);
	}

	bool Proxy::NotifyDeleteItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & itemID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeleteItem;
__msg.Write(__msgid); 
	
__msg << itemID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeleteItem, (::Proud::RmiID)Rmi_NotifyDeleteItem);
	}
        
	bool Proxy::NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateItem, (::Proud::RmiID)Rmi_NotifyCreateItem);
	}

	bool Proxy::NotifyCreateItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateItem, (::Proud::RmiID)Rmi_NotifyCreateItem);
	}
        
	bool Proxy::NotifyStartOxyChargerState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & oxyChargerID,  const float & oxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
__msg.Write(__msgid); 
	
__msg << oxyChargerID;
__msg << oxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyStartOxyChargerState, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState);
	}

	bool Proxy::NotifyStartOxyChargerState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & oxyChargerID,  const float & oxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
__msg.Write(__msgid); 
	
__msg << oxyChargerID;
__msg << oxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyStartOxyChargerState, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState);
	}
        
	bool Proxy::NotifyStartItemBoxState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemBoxID,  const bool & openState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartItemBoxState;
__msg.Write(__msgid); 
	
__msg << itemBoxID;
__msg << openState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyStartItemBoxState, (::Proud::RmiID)Rmi_NotifyStartItemBoxState);
	}

	bool Proxy::NotifyStartItemBoxState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & itemBoxID,  const bool & openState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartItemBoxState;
__msg.Write(__msgid); 
	
__msg << itemBoxID;
__msg << openState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyStartItemBoxState, (::Proud::RmiID)Rmi_NotifyStartItemBoxState);
	}
        
	bool Proxy::NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem);
	}

	bool Proxy::NotifyPlayerEquipItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const int & itemCID,  const int & itemID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem);
	}
        
	bool Proxy::NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerUnEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem);
	}

	bool Proxy::NotifyPlayerUnEquipItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const int & itemCID,  const int & itemID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemCID;
__msg << itemID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerUnEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem);
	}
        
	bool Proxy::NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletType;
__msg << bulletID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletCreate, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate);
	}

	bool Proxy::NotifyPlayerBulletCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletType,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletType;
__msg << bulletID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletCreate, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate);
	}
        
	bool Proxy::NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletMove, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove);
	}

	bool Proxy::NotifyPlayerBulletMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletMove, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove);
	}
        
	bool Proxy::NotifyPlayerBulletDelete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletDelete, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete);
	}

	bool Proxy::NotifyPlayerBulletDelete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletDelete, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete);
	}
        
	bool Proxy::NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerAnimation;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << animationName;
__msg << aniValue;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerAnimation, (::Proud::RmiID)Rmi_NotifyPlayerAnimation);
	}

	bool Proxy::NotifyPlayerAnimation ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerAnimation;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << animationName;
__msg << aniValue;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerAnimation, (::Proud::RmiID)Rmi_NotifyPlayerAnimation);
	}
        
	bool Proxy::NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp,  const float & prevhp,  const float & maxhp)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << hp;
__msg << prevhp;
__msg << maxhp;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerChangeHP, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP);
	}

	bool Proxy::NotifyPlayerChangeHP ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & hp,  const float & prevhp,  const float & maxhp)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << hp;
__msg << prevhp;
__msg << maxhp;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerChangeHP, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP);
	}
        
	bool Proxy::NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen,  const float & prevoxy,  const float & maxoxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << oxygen;
__msg << prevoxy;
__msg << maxoxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerChangeOxygen, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen);
	}

	bool Proxy::NotifyPlayerChangeOxygen ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & oxygen,  const float & prevoxy,  const float & maxoxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << oxygen;
__msg << prevoxy;
__msg << maxoxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerChangeOxygen, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen);
	}
        
	bool Proxy::NotifyUseOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseOxyCharger, (::Proud::RmiID)Rmi_NotifyUseOxyCharger);
	}

	bool Proxy::NotifyUseOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseOxyCharger, (::Proud::RmiID)Rmi_NotifyUseOxyCharger);
	}
        
	bool Proxy::NotifyUseItemBox ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & itemBoxIndex,  const int & itemID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
__msg << itemID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseItemBox, (::Proud::RmiID)Rmi_NotifyUseItemBox);
	}

	bool Proxy::NotifyUseItemBox ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & itemBoxIndex,  const int & itemID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
__msg << itemID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseItemBox, (::Proud::RmiID)Rmi_NotifyUseItemBox);
	}
        
	bool Proxy::NotifyShelterInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & doorState,  const bool & lightState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyShelterInfo;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
__msg << lightState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyShelterInfo, (::Proud::RmiID)Rmi_NotifyShelterInfo);
	}

	bool Proxy::NotifyShelterInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & doorState,  const bool & lightState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyShelterInfo;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
__msg << lightState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyShelterInfo, (::Proud::RmiID)Rmi_NotifyShelterInfo);
	}
        
	bool Proxy::NotifyMeteorCreateTime ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & time)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
__msg.Write(__msgid); 
	
__msg << time;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyMeteorCreateTime, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime);
	}

	bool Proxy::NotifyMeteorCreateTime ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & time)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
__msg.Write(__msgid); 
	
__msg << time;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyMeteorCreateTime, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime);
	}
        
	bool Proxy::NotifyMeteorCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & anglex,  const float & anglez)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreate;
__msg.Write(__msgid); 
	
__msg << anglex;
__msg << anglez;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyMeteorCreate, (::Proud::RmiID)Rmi_NotifyMeteorCreate);
	}

	bool Proxy::NotifyMeteorCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & anglex,  const float & anglez)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreate;
__msg.Write(__msgid); 
	
__msg << anglex;
__msg << anglez;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyMeteorCreate, (::Proud::RmiID)Rmi_NotifyMeteorCreate);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestServerConnect =_PNT("RequestServerConnect");
#else
const PNTCHAR* Proxy::RmiName_RequestServerConnect =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestClientJoin =_PNT("RequestClientJoin");
#else
const PNTCHAR* Proxy::RmiName_RequestClientJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestWorldCreateItem =_PNT("RequestWorldCreateItem");
#else
const PNTCHAR* Proxy::RmiName_RequestWorldCreateItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestPlayerDamage =_PNT("RequestPlayerDamage");
#else
const PNTCHAR* Proxy::RmiName_RequestPlayerDamage =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestPlayerUseOxy =_PNT("RequestPlayerUseOxy");
#else
const PNTCHAR* Proxy::RmiName_RequestPlayerUseOxy =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseOxyCharger =_PNT("RequestUseOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_RequestUseOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseItemBox =_PNT("RequestUseItemBox");
#else
const PNTCHAR* Proxy::RmiName_RequestUseItemBox =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterStartSetup =_PNT("RequestShelterStartSetup");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterStartSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterDoorControl =_PNT("RequestShelterDoorControl");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterDoorControl =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterEnter =_PNT("RequestShelterEnter");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterEnter =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyOtherClientJoin =_PNT("NotifyOtherClientJoin");
#else
const PNTCHAR* Proxy::RmiName_NotifyOtherClientJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerLost =_PNT("NotifyPlayerLost");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerLost =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerMove =_PNT("NotifyPlayerMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeleteItem =_PNT("NotifyDeleteItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeleteItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateItem =_PNT("NotifyCreateItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyStartOxyChargerState =_PNT("NotifyStartOxyChargerState");
#else
const PNTCHAR* Proxy::RmiName_NotifyStartOxyChargerState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyStartItemBoxState =_PNT("NotifyStartItemBoxState");
#else
const PNTCHAR* Proxy::RmiName_NotifyStartItemBoxState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerEquipItem =_PNT("NotifyPlayerEquipItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerEquipItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerUnEquipItem =_PNT("NotifyPlayerUnEquipItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerUnEquipItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletCreate =_PNT("NotifyPlayerBulletCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletCreate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletMove =_PNT("NotifyPlayerBulletMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletDelete =_PNT("NotifyPlayerBulletDelete");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletDelete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerAnimation =_PNT("NotifyPlayerAnimation");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerAnimation =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeHP =_PNT("NotifyPlayerChangeHP");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeHP =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeOxygen =_PNT("NotifyPlayerChangeOxygen");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeOxygen =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseOxyCharger =_PNT("NotifyUseOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseItemBox =_PNT("NotifyUseItemBox");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseItemBox =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyShelterInfo =_PNT("NotifyShelterInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyShelterInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreateTime =_PNT("NotifyMeteorCreateTime");
#else
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreateTime =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreate =_PNT("NotifyMeteorCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreate =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestServerConnect;
}

