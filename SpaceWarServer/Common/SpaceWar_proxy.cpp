




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "SpaceWar_proxy.h"

namespace SpaceWar
{
        
	bool Proxy::RequestGameExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameExit;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestGameExit, (::Proud::RmiID)Rmi_RequestGameExit);
	}

	bool Proxy::RequestGameExit ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameExit;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestGameExit, (::Proud::RmiID)Rmi_RequestGameExit);
	}
        
	bool Proxy::RequestServerConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerConnect;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestServerConnect, (::Proud::RmiID)Rmi_RequestServerConnect);
	}

	bool Proxy::RequestServerConnect ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerConnect;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestServerConnect, (::Proud::RmiID)Rmi_RequestServerConnect);
	}
        
	bool Proxy::RequestLobbyConnect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLobbyConnect;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLobbyConnect, (::Proud::RmiID)Rmi_RequestLobbyConnect);
	}

	bool Proxy::RequestLobbyConnect ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLobbyConnect;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLobbyConnect, (::Proud::RmiID)Rmi_RequestLobbyConnect);
	}
        
	bool Proxy::RequestNetworkGameTeamSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & name,  const bool & teamRed)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect;
__msg.Write(__msgid); 
	
__msg << name;
__msg << teamRed;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkGameTeamSelect, (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect);
	}

	bool Proxy::RequestNetworkGameTeamSelect ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & name,  const bool & teamRed)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect;
__msg.Write(__msgid); 
	
__msg << name;
__msg << teamRed;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkGameTeamSelect, (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect);
	}
        
	bool Proxy::RequestNetworkGameReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & name,  const bool & ready)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameReady;
__msg.Write(__msgid); 
	
__msg << name;
__msg << ready;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkGameReady, (::Proud::RmiID)Rmi_RequestNetworkGameReady);
	}

	bool Proxy::RequestNetworkGameReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & name,  const bool & ready)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameReady;
__msg.Write(__msgid); 
	
__msg << name;
__msg << ready;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkGameReady, (::Proud::RmiID)Rmi_RequestNetworkGameReady);
	}
        
	bool Proxy::RequestNetworkChangeMap ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & mapName)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkChangeMap;
__msg.Write(__msgid); 
	
__msg << mapName;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkChangeMap, (::Proud::RmiID)Rmi_RequestNetworkChangeMap);
	}

	bool Proxy::RequestNetworkChangeMap ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & mapName)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkChangeMap;
__msg.Write(__msgid); 
	
__msg << mapName;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkChangeMap, (::Proud::RmiID)Rmi_RequestNetworkChangeMap);
	}
        
	bool Proxy::RequestNetworkPlayerCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & playerCount)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkPlayerCount;
__msg.Write(__msgid); 
	
__msg << playerCount;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkPlayerCount, (::Proud::RmiID)Rmi_RequestNetworkPlayerCount);
	}

	bool Proxy::RequestNetworkPlayerCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & playerCount)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkPlayerCount;
__msg.Write(__msgid); 
	
__msg << playerCount;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkPlayerCount, (::Proud::RmiID)Rmi_RequestNetworkPlayerCount);
	}
        
	bool Proxy::RequestNetworkGameModeChange ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & gameMode,  const bool & teamMode)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameModeChange;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << teamMode;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkGameModeChange, (::Proud::RmiID)Rmi_RequestNetworkGameModeChange);
	}

	bool Proxy::RequestNetworkGameModeChange ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & gameMode,  const bool & teamMode)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameModeChange;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << teamMode;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkGameModeChange, (::Proud::RmiID)Rmi_RequestNetworkGameModeChange);
	}
        
	bool Proxy::RequestNetworkGameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameStart;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkGameStart, (::Proud::RmiID)Rmi_RequestNetworkGameStart);
	}

	bool Proxy::RequestNetworkGameStart ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkGameStart;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkGameStart, (::Proud::RmiID)Rmi_RequestNetworkGameStart);
	}
        
	bool Proxy::RequestNetworkHostOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkHostOut;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNetworkHostOut, (::Proud::RmiID)Rmi_RequestNetworkHostOut);
	}

	bool Proxy::RequestNetworkHostOut ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNetworkHostOut;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNetworkHostOut, (::Proud::RmiID)Rmi_RequestNetworkHostOut);
	}
        
	bool Proxy::RequestGameSceneJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const Proud::Vector3 & pos,  const int & hostID,  const string & name)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameSceneJoin;
__msg.Write(__msgid); 
	
__msg << pos;
__msg << hostID;
__msg << name;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestGameSceneJoin, (::Proud::RmiID)Rmi_RequestGameSceneJoin);
	}

	bool Proxy::RequestGameSceneJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const Proud::Vector3 & pos,  const int & hostID,  const string & name)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameSceneJoin;
__msg.Write(__msgid); 
	
__msg << pos;
__msg << hostID;
__msg << name;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestGameSceneJoin, (::Proud::RmiID)Rmi_RequestGameSceneJoin);
	}
        
	bool Proxy::NotifyNetworkUserSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & userHostID,  const string & userName,  const bool & ready,  const bool & teamRed)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkUserSetup;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << userName;
__msg << ready;
__msg << teamRed;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkUserSetup, (::Proud::RmiID)Rmi_NotifyNetworkUserSetup);
	}

	bool Proxy::NotifyNetworkUserSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & userHostID,  const string & userName,  const bool & ready,  const bool & teamRed)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkUserSetup;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << userName;
__msg << ready;
__msg << teamRed;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkUserSetup, (::Proud::RmiID)Rmi_NotifyNetworkUserSetup);
	}
        
	bool Proxy::NotifyNetworkGameTeamChange ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & userHostID,  const bool & teamRed)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << teamRed;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameTeamChange, (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange);
	}

	bool Proxy::NotifyNetworkGameTeamChange ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & userHostID,  const bool & teamRed)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << teamRed;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameTeamChange, (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange);
	}
        
	bool Proxy::NotifyNetworkConnectUser ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & userHostID,  const string & userName)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkConnectUser;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << userName;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkConnectUser, (::Proud::RmiID)Rmi_NotifyNetworkConnectUser);
	}

	bool Proxy::NotifyNetworkConnectUser ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & userHostID,  const string & userName)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkConnectUser;
__msg.Write(__msgid); 
	
__msg << userHostID;
__msg << userName;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkConnectUser, (::Proud::RmiID)Rmi_NotifyNetworkConnectUser);
	}
        
	bool Proxy::NotifyNetworkReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & userName,  const bool & ready)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkReady;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userName;
__msg << ready;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkReady, (::Proud::RmiID)Rmi_NotifyNetworkReady);
	}

	bool Proxy::NotifyNetworkReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & userName,  const bool & ready)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkReady;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userName;
__msg << ready;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkReady, (::Proud::RmiID)Rmi_NotifyNetworkReady);
	}
        
	bool Proxy::NotifyNetworkGameModeChange ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & gameMode,  const bool & teamMode)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameModeChange;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << teamMode;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameModeChange, (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange);
	}

	bool Proxy::NotifyNetworkGameModeChange ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & gameMode,  const bool & teamMode)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameModeChange;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << teamMode;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameModeChange, (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange);
	}
        
	bool Proxy::NotifyNetworkGamePlayerCountChange ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & playerCount)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange;
__msg.Write(__msgid); 
	
__msg << playerCount;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGamePlayerCountChange, (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange);
	}

	bool Proxy::NotifyNetworkGamePlayerCountChange ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & playerCount)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange;
__msg.Write(__msgid); 
	
__msg << playerCount;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGamePlayerCountChange, (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange);
	}
        
	bool Proxy::NotifyNetworkGameChangeMap ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & map)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap;
__msg.Write(__msgid); 
	
__msg << map;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameChangeMap, (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap);
	}

	bool Proxy::NotifyNetworkGameChangeMap ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & map)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap;
__msg.Write(__msgid); 
	
__msg << map;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameChangeMap, (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap);
	}
        
	bool Proxy::NotifyNetworkGameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameStart;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameStart, (::Proud::RmiID)Rmi_NotifyNetworkGameStart);
	}

	bool Proxy::NotifyNetworkGameStart ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameStart;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameStart, (::Proud::RmiID)Rmi_NotifyNetworkGameStart);
	}
        
	bool Proxy::NotifyNetworkGameStartFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameStartFailed, (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed);
	}

	bool Proxy::NotifyNetworkGameStartFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameStartFailed, (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed);
	}
        
	bool Proxy::NotifyNetworkGameHostOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameHostOut;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNetworkGameHostOut, (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut);
	}

	bool Proxy::NotifyNetworkGameHostOut ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNetworkGameHostOut;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNetworkGameHostOut, (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut);
	}
        
	bool Proxy::RequestClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestClientJoin, (::Proud::RmiID)Rmi_RequestClientJoin);
	}

	bool Proxy::RequestClientJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestClientJoin, (::Proud::RmiID)Rmi_RequestClientJoin);
	}
        
	bool Proxy::RequestWorldCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestWorldCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestWorldCreateItem, (::Proud::RmiID)Rmi_RequestWorldCreateItem);
	}

	bool Proxy::RequestWorldCreateItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestWorldCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestWorldCreateItem, (::Proud::RmiID)Rmi_RequestWorldCreateItem);
	}
        
	bool Proxy::RequestPlayerDamage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & targetHostID,  const string & name,  const string & weaponName,  const float & damage,  const Proud::Vector3 & dir)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerDamage;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << targetHostID;
__msg << name;
__msg << weaponName;
__msg << damage;
__msg << dir;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestPlayerDamage, (::Proud::RmiID)Rmi_RequestPlayerDamage);
	}

	bool Proxy::RequestPlayerDamage ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & targetHostID,  const string & name,  const string & weaponName,  const float & damage,  const Proud::Vector3 & dir)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerDamage;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << targetHostID;
__msg << name;
__msg << weaponName;
__msg << damage;
__msg << dir;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestPlayerDamage, (::Proud::RmiID)Rmi_RequestPlayerDamage);
	}
        
	bool Proxy::RequestPlayerUseOxy ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & useOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerUseOxy;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << useOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestPlayerUseOxy, (::Proud::RmiID)Rmi_RequestPlayerUseOxy);
	}

	bool Proxy::RequestPlayerUseOxy ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & useOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestPlayerUseOxy;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << useOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestPlayerUseOxy, (::Proud::RmiID)Rmi_RequestPlayerUseOxy);
	}
        
	bool Proxy::RequestUseOxyChargerStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & oxyChargerIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyChargerStart;
__msg.Write(__msgid); 
	
__msg << oxyChargerIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseOxyChargerStart, (::Proud::RmiID)Rmi_RequestUseOxyChargerStart);
	}

	bool Proxy::RequestUseOxyChargerStart ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & oxyChargerIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyChargerStart;
__msg.Write(__msgid); 
	
__msg << oxyChargerIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseOxyChargerStart, (::Proud::RmiID)Rmi_RequestUseOxyChargerStart);
	}
        
	bool Proxy::RequestUseOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseOxyCharger, (::Proud::RmiID)Rmi_RequestUseOxyCharger);
	}

	bool Proxy::RequestUseOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseOxyCharger, (::Proud::RmiID)Rmi_RequestUseOxyCharger);
	}
        
	bool Proxy::RequestUseOxyChargerEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & oxyChargerIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyChargerEnd;
__msg.Write(__msgid); 
	
__msg << oxyChargerIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseOxyChargerEnd, (::Proud::RmiID)Rmi_RequestUseOxyChargerEnd);
	}

	bool Proxy::RequestUseOxyChargerEnd ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & oxyChargerIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseOxyChargerEnd;
__msg.Write(__msgid); 
	
__msg << oxyChargerIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseOxyChargerEnd, (::Proud::RmiID)Rmi_RequestUseOxyChargerEnd);
	}
        
	bool Proxy::RequestUseItemBox ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & itemBoxIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUseItemBox, (::Proud::RmiID)Rmi_RequestUseItemBox);
	}

	bool Proxy::RequestUseItemBox ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & itemBoxIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUseItemBox, (::Proud::RmiID)Rmi_RequestUseItemBox);
	}
        
	bool Proxy::RequestOxyChargerStartSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & oxyChargerID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestOxyChargerStartSetup;
__msg.Write(__msgid); 
	
__msg << oxyChargerID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestOxyChargerStartSetup, (::Proud::RmiID)Rmi_RequestOxyChargerStartSetup);
	}

	bool Proxy::RequestOxyChargerStartSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & oxyChargerID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestOxyChargerStartSetup;
__msg.Write(__msgid); 
	
__msg << oxyChargerID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestOxyChargerStartSetup, (::Proud::RmiID)Rmi_RequestOxyChargerStartSetup);
	}
        
	bool Proxy::RequestShelterStartSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & shelterID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterStartSetup;
__msg.Write(__msgid); 
	
__msg << shelterID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterStartSetup, (::Proud::RmiID)Rmi_RequestShelterStartSetup);
	}

	bool Proxy::RequestShelterStartSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & shelterID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterStartSetup;
__msg.Write(__msgid); 
	
__msg << shelterID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterStartSetup, (::Proud::RmiID)Rmi_RequestShelterStartSetup);
	}
        
	bool Proxy::RequestShelterDoorControl ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & doorState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterDoorControl;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterDoorControl, (::Proud::RmiID)Rmi_RequestShelterDoorControl);
	}

	bool Proxy::RequestShelterDoorControl ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & doorState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterDoorControl;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterDoorControl, (::Proud::RmiID)Rmi_RequestShelterDoorControl);
	}
        
	bool Proxy::RequestShelterEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & enter)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterEnter;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << enter;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestShelterEnter, (::Proud::RmiID)Rmi_RequestShelterEnter);
	}

	bool Proxy::RequestShelterEnter ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & enter)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestShelterEnter;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << enter;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestShelterEnter, (::Proud::RmiID)Rmi_RequestShelterEnter);
	}
        
	bool Proxy::RequestItemDelete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & networkID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestItemDelete;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestItemDelete, (::Proud::RmiID)Rmi_RequestItemDelete);
	}

	bool Proxy::RequestItemDelete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & networkID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestItemDelete;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestItemDelete, (::Proud::RmiID)Rmi_RequestItemDelete);
	}
        
	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const bool & host)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << host;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}

	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const bool & host)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << host;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}
        
	bool Proxy::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}

	bool Proxy::NotifyLoginFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}
        
	bool Proxy::NotifyOtherClientJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyOtherClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyOtherClientJoin, (::Proud::RmiID)Rmi_NotifyOtherClientJoin);
	}

	bool Proxy::NotifyOtherClientJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & x,  const float & y,  const float & z)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyOtherClientJoin;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << x;
__msg << y;
__msg << z;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyOtherClientJoin, (::Proud::RmiID)Rmi_NotifyOtherClientJoin);
	}
        
	bool Proxy::NotifyPlayerLost ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerLost;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerLost, (::Proud::RmiID)Rmi_NotifyPlayerLost);
	}

	bool Proxy::NotifyPlayerLost ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerLost;
__msg.Write(__msgid); 
	
__msg << hostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerLost, (::Proud::RmiID)Rmi_NotifyPlayerLost);
	}
        
	bool Proxy::NotifyPlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerMove;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << curX;
__msg << curY;
__msg << curZ;
__msg << velocityX;
__msg << velocityY;
__msg << velocityZ;
__msg << crx;
__msg << cry;
__msg << crz;
__msg << rx;
__msg << ry;
__msg << rz;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerMove, (::Proud::RmiID)Rmi_NotifyPlayerMove);
	}

	bool Proxy::NotifyPlayerMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const float & curX,  const float & curY,  const float & curZ,  const float & velocityX,  const float & velocityY,  const float & velocityZ,  const float & crx,  const float & cry,  const float & crz,  const float & rx,  const float & ry,  const float & rz)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerMove;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << curX;
__msg << curY;
__msg << curZ;
__msg << velocityX;
__msg << velocityY;
__msg << velocityZ;
__msg << crx;
__msg << cry;
__msg << crz;
__msg << rx;
__msg << ry;
__msg << rz;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerMove, (::Proud::RmiID)Rmi_NotifyPlayerMove);
	}
        
	bool Proxy::NotifyDeleteItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & networkID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeleteItem;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeleteItem, (::Proud::RmiID)Rmi_NotifyDeleteItem);
	}

	bool Proxy::NotifyDeleteItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & networkID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeleteItem;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeleteItem, (::Proud::RmiID)Rmi_NotifyDeleteItem);
	}
        
	bool Proxy::NotifyCreateItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateItem, (::Proud::RmiID)Rmi_NotifyCreateItem);
	}

	bool Proxy::NotifyCreateItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateItem, (::Proud::RmiID)Rmi_NotifyCreateItem);
	}
        
	bool Proxy::NotifyStartItemBoxState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & itemBoxID,  const bool & openState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartItemBoxState;
__msg.Write(__msgid); 
	
__msg << itemBoxID;
__msg << openState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyStartItemBoxState, (::Proud::RmiID)Rmi_NotifyStartItemBoxState);
	}

	bool Proxy::NotifyStartItemBoxState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & itemBoxID,  const bool & openState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartItemBoxState;
__msg.Write(__msgid); 
	
__msg << itemBoxID;
__msg << openState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyStartItemBoxState, (::Proud::RmiID)Rmi_NotifyStartItemBoxState);
	}
        
	bool Proxy::NotifyPlayerEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & itemID,  const string & networkID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem);
	}

	bool Proxy::NotifyPlayerEquipItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & itemID,  const string & networkID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem);
	}
        
	bool Proxy::NotifyPlayerUnEquipItem ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerUnEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem);
	}

	bool Proxy::NotifyPlayerUnEquipItem ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & itemID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << itemID;
__msg << networkID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerUnEquipItem, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem);
	}
        
	bool Proxy::NotifyPlayerBulletCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const string & weaponID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << weaponID;
__msg << pos;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletCreate, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate);
	}

	bool Proxy::NotifyPlayerBulletCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletID,  const string & weaponID,  const Proud::Vector3 & pos,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << weaponID;
__msg << pos;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletCreate, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate);
	}
        
	bool Proxy::NotifyPlayerBulletMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletMove, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove);
	}

	bool Proxy::NotifyPlayerBulletMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletMove, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove);
	}
        
	bool Proxy::NotifyPlayerBulletDelete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & bulletID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerBulletDelete, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete);
	}

	bool Proxy::NotifyPlayerBulletDelete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & bulletID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << bulletID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerBulletDelete, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete);
	}
        
	bool Proxy::NotifyPlayerAnimation ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerAnimation;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << animationName;
__msg << aniValue;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerAnimation, (::Proud::RmiID)Rmi_NotifyPlayerAnimation);
	}

	bool Proxy::NotifyPlayerAnimation ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const string & name,  const string & animationName,  const int & aniValue)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerAnimation;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << name;
__msg << animationName;
__msg << aniValue;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerAnimation, (::Proud::RmiID)Rmi_NotifyPlayerAnimation);
	}
        
	bool Proxy::NotifyPlayerChangeHP ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & hp,  const float & prevhp,  const float & maxhp,  const Proud::Vector3 & dir)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << hp;
__msg << prevhp;
__msg << maxhp;
__msg << dir;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerChangeHP, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP);
	}

	bool Proxy::NotifyPlayerChangeHP ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & hp,  const float & prevhp,  const float & maxhp,  const Proud::Vector3 & dir)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << hp;
__msg << prevhp;
__msg << maxhp;
__msg << dir;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerChangeHP, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP);
	}
        
	bool Proxy::NotifyPlayerChangeOxygen ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & name,  const float & oxygen,  const float & prevoxy,  const float & maxoxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << oxygen;
__msg << prevoxy;
__msg << maxoxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyPlayerChangeOxygen, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen);
	}

	bool Proxy::NotifyPlayerChangeOxygen ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & name,  const float & oxygen,  const float & prevoxy,  const float & maxoxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << name;
__msg << oxygen;
__msg << prevoxy;
__msg << maxoxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyPlayerChangeOxygen, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen);
	}
        
	bool Proxy::NotifyUseOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseOxyCharger, (::Proud::RmiID)Rmi_NotifyUseOxyCharger);
	}

	bool Proxy::NotifyUseOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & oxyChargerIndex,  const float & userOxy)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseOxyCharger;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << oxyChargerIndex;
__msg << userOxy;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseOxyCharger, (::Proud::RmiID)Rmi_NotifyUseOxyCharger);
	}
        
	bool Proxy::NotifyUseSuccessedOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & targetHostID,  const int & oxyChargerIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseSuccessedOxyCharger;
__msg.Write(__msgid); 
	
__msg << targetHostID;
__msg << oxyChargerIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseSuccessedOxyCharger, (::Proud::RmiID)Rmi_NotifyUseSuccessedOxyCharger);
	}

	bool Proxy::NotifyUseSuccessedOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & targetHostID,  const int & oxyChargerIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseSuccessedOxyCharger;
__msg.Write(__msgid); 
	
__msg << targetHostID;
__msg << oxyChargerIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseSuccessedOxyCharger, (::Proud::RmiID)Rmi_NotifyUseSuccessedOxyCharger);
	}
        
	bool Proxy::NotifyUseFailedOxyCharger ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & targetHostID,  const int & oxyChargerIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseFailedOxyCharger;
__msg.Write(__msgid); 
	
__msg << targetHostID;
__msg << oxyChargerIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseFailedOxyCharger, (::Proud::RmiID)Rmi_NotifyUseFailedOxyCharger);
	}

	bool Proxy::NotifyUseFailedOxyCharger ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & targetHostID,  const int & oxyChargerIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseFailedOxyCharger;
__msg.Write(__msgid); 
	
__msg << targetHostID;
__msg << oxyChargerIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseFailedOxyCharger, (::Proud::RmiID)Rmi_NotifyUseFailedOxyCharger);
	}
        
	bool Proxy::NotifyUseItemBox ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & itemBoxIndex,  const string & itemID,  const string & networkID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
__msg << itemID;
__msg << networkID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUseItemBox, (::Proud::RmiID)Rmi_NotifyUseItemBox);
	}

	bool Proxy::NotifyUseItemBox ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & itemBoxIndex,  const string & itemID,  const string & networkID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUseItemBox;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << itemBoxIndex;
__msg << itemID;
__msg << networkID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUseItemBox, (::Proud::RmiID)Rmi_NotifyUseItemBox);
	}
        
	bool Proxy::NotifyShelterInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const int & shelterID,  const bool & doorState,  const bool & lightState)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyShelterInfo;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
__msg << lightState;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyShelterInfo, (::Proud::RmiID)Rmi_NotifyShelterInfo);
	}

	bool Proxy::NotifyShelterInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const int & shelterID,  const bool & doorState,  const bool & lightState)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyShelterInfo;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << shelterID;
__msg << doorState;
__msg << lightState;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyShelterInfo, (::Proud::RmiID)Rmi_NotifyShelterInfo);
	}
        
	bool Proxy::NotifyMeteorCreateTime ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & time)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
__msg.Write(__msgid); 
	
__msg << time;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyMeteorCreateTime, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime);
	}

	bool Proxy::NotifyMeteorCreateTime ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & time)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
__msg.Write(__msgid); 
	
__msg << time;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyMeteorCreateTime, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime);
	}
        
	bool Proxy::NotifyMeteorCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & anglex,  const float & anglez,  const string & meteorID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreate;
__msg.Write(__msgid); 
	
__msg << anglex;
__msg << anglez;
__msg << meteorID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyMeteorCreate, (::Proud::RmiID)Rmi_NotifyMeteorCreate);
	}

	bool Proxy::NotifyMeteorCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & anglex,  const float & anglez,  const string & meteorID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyMeteorCreate;
__msg.Write(__msgid); 
	
__msg << anglex;
__msg << anglez;
__msg << meteorID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyMeteorCreate, (::Proud::RmiID)Rmi_NotifyMeteorCreate);
	}
        
	bool Proxy::NotifySpaceShipEngineCharge ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & spaceShipID,  const float & fuel)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge;
__msg.Write(__msgid); 
	
__msg << spaceShipID;
__msg << fuel;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySpaceShipEngineCharge, (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge);
	}

	bool Proxy::NotifySpaceShipEngineCharge ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & spaceShipID,  const float & fuel)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge;
__msg.Write(__msgid); 
	
__msg << spaceShipID;
__msg << fuel;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySpaceShipEngineCharge, (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge);
	}
        
	bool Proxy::NotifyGrenadeCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & networkID,  const Proud::Vector3 & pos)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << pos;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGrenadeCreate, (::Proud::RmiID)Rmi_NotifyGrenadeCreate);
	}

	bool Proxy::NotifyGrenadeCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & networkID,  const Proud::Vector3 & pos)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeCreate;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << pos;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGrenadeCreate, (::Proud::RmiID)Rmi_NotifyGrenadeCreate);
	}
        
	bool Proxy::NotifyGrenadeMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGrenadeMove, (::Proud::RmiID)Rmi_NotifyGrenadeMove);
	}

	bool Proxy::NotifyGrenadeMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & networkID,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity,  const Proud::Vector3 & rot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeMove;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << pos;
__msg << velocity;
__msg << rot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGrenadeMove, (::Proud::RmiID)Rmi_NotifyGrenadeMove);
	}
        
	bool Proxy::NotifyGrenadeBoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & sendHostID,  const string & networkID,  const bool & isStone)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeBoom;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << isStone;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGrenadeBoom, (::Proud::RmiID)Rmi_NotifyGrenadeBoom);
	}

	bool Proxy::NotifyGrenadeBoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & sendHostID,  const string & networkID,  const bool & isStone)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeBoom;
__msg.Write(__msgid); 
	
__msg << sendHostID;
__msg << networkID;
__msg << isStone;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGrenadeBoom, (::Proud::RmiID)Rmi_NotifyGrenadeBoom);
	}
        
	bool Proxy::NotifyGrenadeRemove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & networkID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeRemove;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGrenadeRemove, (::Proud::RmiID)Rmi_NotifyGrenadeRemove);
	}

	bool Proxy::NotifyGrenadeRemove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & networkID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGrenadeRemove;
__msg.Write(__msgid); 
	
__msg << networkID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGrenadeRemove, (::Proud::RmiID)Rmi_NotifyGrenadeRemove);
	}
        
	bool Proxy::RequestHpUpdate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & hp)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestHpUpdate;
__msg.Write(__msgid); 
	
__msg << hp;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestHpUpdate, (::Proud::RmiID)Rmi_RequestHpUpdate);
	}

	bool Proxy::RequestHpUpdate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & hp)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestHpUpdate;
__msg.Write(__msgid); 
	
__msg << hp;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestHpUpdate, (::Proud::RmiID)Rmi_RequestHpUpdate);
	}
        
	bool Proxy::NotifyDrawGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDrawGame;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDrawGame, (::Proud::RmiID)Rmi_NotifyDrawGame);
	}

	bool Proxy::NotifyDrawGame ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDrawGame;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDrawGame, (::Proud::RmiID)Rmi_NotifyDrawGame);
	}
        
	bool Proxy::RequestDrawGameResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDrawGameResult;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestDrawGameResult, (::Proud::RmiID)Rmi_RequestDrawGameResult);
	}

	bool Proxy::RequestDrawGameResult ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDrawGameResult;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestDrawGameResult, (::Proud::RmiID)Rmi_RequestDrawGameResult);
	}
        
	bool Proxy::RequestSpaceShip ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & winPlayerID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSpaceShip;
__msg.Write(__msgid); 
	
__msg << winPlayerID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestSpaceShip, (::Proud::RmiID)Rmi_RequestSpaceShip);
	}

	bool Proxy::RequestSpaceShip ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & winPlayerID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSpaceShip;
__msg.Write(__msgid); 
	
__msg << winPlayerID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestSpaceShip, (::Proud::RmiID)Rmi_RequestSpaceShip);
	}
        
	bool Proxy::RequestGameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameEnd;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestGameEnd, (::Proud::RmiID)Rmi_RequestGameEnd);
	}

	bool Proxy::RequestGameEnd ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestGameEnd;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestGameEnd, (::Proud::RmiID)Rmi_RequestGameEnd);
	}
        
	bool Proxy::NotifyKillInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & targetName,  const bool & kill,  const int & totalKill,  const int & totalAssist)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyKillInfo;
__msg.Write(__msgid); 
	
__msg << targetName;
__msg << kill;
__msg << totalKill;
__msg << totalAssist;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyKillInfo, (::Proud::RmiID)Rmi_NotifyKillInfo);
	}

	bool Proxy::NotifyKillInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & targetName,  const bool & kill,  const int & totalKill,  const int & totalAssist)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyKillInfo;
__msg.Write(__msgid); 
	
__msg << targetName;
__msg << kill;
__msg << totalKill;
__msg << totalAssist;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyKillInfo, (::Proud::RmiID)Rmi_NotifyKillInfo);
	}
        
	bool Proxy::NotifyGameResultInfoMe ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & gameMode,  const int & winState,  const int & playTime,  const int & kills,  const int & assists,  const int & death,  const int & getMoney)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultInfoMe;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << winState;
__msg << playTime;
__msg << kills;
__msg << assists;
__msg << death;
__msg << getMoney;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGameResultInfoMe, (::Proud::RmiID)Rmi_NotifyGameResultInfoMe);
	}

	bool Proxy::NotifyGameResultInfoMe ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & gameMode,  const int & winState,  const int & playTime,  const int & kills,  const int & assists,  const int & death,  const int & getMoney)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultInfoMe;
__msg.Write(__msgid); 
	
__msg << gameMode;
__msg << winState;
__msg << playTime;
__msg << kills;
__msg << assists;
__msg << death;
__msg << getMoney;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGameResultInfoMe, (::Proud::RmiID)Rmi_NotifyGameResultInfoMe);
	}
        
	bool Proxy::NotifyGameResultInfoOther ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const string & name,  const int & state)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultInfoOther;
__msg.Write(__msgid); 
	
__msg << name;
__msg << state;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGameResultInfoOther, (::Proud::RmiID)Rmi_NotifyGameResultInfoOther);
	}

	bool Proxy::NotifyGameResultInfoOther ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const string & name,  const int & state)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultInfoOther;
__msg.Write(__msgid); 
	
__msg << name;
__msg << state;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGameResultInfoOther, (::Proud::RmiID)Rmi_NotifyGameResultInfoOther);
	}
        
	bool Proxy::NotifyGameResultShow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultShow;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGameResultShow, (::Proud::RmiID)Rmi_NotifyGameResultShow);
	}

	bool Proxy::NotifyGameResultShow ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameResultShow;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGameResultShow, (::Proud::RmiID)Rmi_NotifyGameResultShow);
	}
        
	bool Proxy::RequestSpaceShipSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & spaceShipCount)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSpaceShipSetup;
__msg.Write(__msgid); 
	
__msg << spaceShipCount;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestSpaceShipSetup, (::Proud::RmiID)Rmi_RequestSpaceShipSetup);
	}

	bool Proxy::RequestSpaceShipSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & spaceShipCount)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSpaceShipSetup;
__msg.Write(__msgid); 
	
__msg << spaceShipCount;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestSpaceShipSetup, (::Proud::RmiID)Rmi_RequestSpaceShipSetup);
	}
        
	bool Proxy::NotifyDeathZoneCommingTime ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & tick,  const string & deathzoneID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneCommingTime;
__msg.Write(__msgid); 
	
__msg << tick;
__msg << deathzoneID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeathZoneCommingTime, (::Proud::RmiID)Rmi_NotifyDeathZoneCommingTime);
	}

	bool Proxy::NotifyDeathZoneCommingTime ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & tick,  const string & deathzoneID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneCommingTime;
__msg.Write(__msgid); 
	
__msg << tick;
__msg << deathzoneID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeathZoneCommingTime, (::Proud::RmiID)Rmi_NotifyDeathZoneCommingTime);
	}
        
	bool Proxy::NotifyDeathZoneCreate ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & spaceShipIndex,  const string & deathzoneID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneCreate;
__msg.Write(__msgid); 
	
__msg << spaceShipIndex;
__msg << deathzoneID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeathZoneCreate, (::Proud::RmiID)Rmi_NotifyDeathZoneCreate);
	}

	bool Proxy::NotifyDeathZoneCreate ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & spaceShipIndex,  const string & deathzoneID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneCreate;
__msg.Write(__msgid); 
	
__msg << spaceShipIndex;
__msg << deathzoneID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeathZoneCreate, (::Proud::RmiID)Rmi_NotifyDeathZoneCreate);
	}
        
	bool Proxy::RequestDeathZoneMoveIndex ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & moveIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex;
__msg.Write(__msgid); 
	
__msg << moveIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestDeathZoneMoveIndex, (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex);
	}

	bool Proxy::RequestDeathZoneMoveIndex ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & moveIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex;
__msg.Write(__msgid); 
	
__msg << moveIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestDeathZoneMoveIndex, (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex);
	}
        
	bool Proxy::NotifyDeathZoneMoveHostAndIndexSetup ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & moveHostID,  const int & currentIndex)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup;
__msg.Write(__msgid); 
	
__msg << moveHostID;
__msg << currentIndex;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeathZoneMoveHostAndIndexSetup, (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup);
	}

	bool Proxy::NotifyDeathZoneMoveHostAndIndexSetup ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & moveHostID,  const int & currentIndex)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup;
__msg.Write(__msgid); 
	
__msg << moveHostID;
__msg << currentIndex;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeathZoneMoveHostAndIndexSetup, (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup);
	}
        
	bool Proxy::NotifyDeathZoneMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneMove;
__msg.Write(__msgid); 
	
__msg << pos;
__msg << velocity;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeathZoneMove, (::Proud::RmiID)Rmi_NotifyDeathZoneMove);
	}

	bool Proxy::NotifyDeathZoneMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const Proud::Vector3 & pos,  const Proud::Vector3 & velocity)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeathZoneMove;
__msg.Write(__msgid); 
	
__msg << pos;
__msg << velocity;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeathZoneMove, (::Proud::RmiID)Rmi_NotifyDeathZoneMove);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestGameExit =_PNT("RequestGameExit");
#else
const PNTCHAR* Proxy::RmiName_RequestGameExit =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestServerConnect =_PNT("RequestServerConnect");
#else
const PNTCHAR* Proxy::RmiName_RequestServerConnect =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLobbyConnect =_PNT("RequestLobbyConnect");
#else
const PNTCHAR* Proxy::RmiName_RequestLobbyConnect =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkGameTeamSelect =_PNT("RequestNetworkGameTeamSelect");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkGameTeamSelect =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkGameReady =_PNT("RequestNetworkGameReady");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkGameReady =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkChangeMap =_PNT("RequestNetworkChangeMap");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkChangeMap =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkPlayerCount =_PNT("RequestNetworkPlayerCount");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkPlayerCount =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkGameModeChange =_PNT("RequestNetworkGameModeChange");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkGameModeChange =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkGameStart =_PNT("RequestNetworkGameStart");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkGameStart =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNetworkHostOut =_PNT("RequestNetworkHostOut");
#else
const PNTCHAR* Proxy::RmiName_RequestNetworkHostOut =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestGameSceneJoin =_PNT("RequestGameSceneJoin");
#else
const PNTCHAR* Proxy::RmiName_RequestGameSceneJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkUserSetup =_PNT("NotifyNetworkUserSetup");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkUserSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameTeamChange =_PNT("NotifyNetworkGameTeamChange");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameTeamChange =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkConnectUser =_PNT("NotifyNetworkConnectUser");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkConnectUser =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkReady =_PNT("NotifyNetworkReady");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkReady =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameModeChange =_PNT("NotifyNetworkGameModeChange");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameModeChange =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGamePlayerCountChange =_PNT("NotifyNetworkGamePlayerCountChange");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGamePlayerCountChange =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameChangeMap =_PNT("NotifyNetworkGameChangeMap");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameChangeMap =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameStart =_PNT("NotifyNetworkGameStart");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameStart =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameStartFailed =_PNT("NotifyNetworkGameStartFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameStartFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameHostOut =_PNT("NotifyNetworkGameHostOut");
#else
const PNTCHAR* Proxy::RmiName_NotifyNetworkGameHostOut =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestClientJoin =_PNT("RequestClientJoin");
#else
const PNTCHAR* Proxy::RmiName_RequestClientJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestWorldCreateItem =_PNT("RequestWorldCreateItem");
#else
const PNTCHAR* Proxy::RmiName_RequestWorldCreateItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestPlayerDamage =_PNT("RequestPlayerDamage");
#else
const PNTCHAR* Proxy::RmiName_RequestPlayerDamage =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestPlayerUseOxy =_PNT("RequestPlayerUseOxy");
#else
const PNTCHAR* Proxy::RmiName_RequestPlayerUseOxy =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseOxyChargerStart =_PNT("RequestUseOxyChargerStart");
#else
const PNTCHAR* Proxy::RmiName_RequestUseOxyChargerStart =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseOxyCharger =_PNT("RequestUseOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_RequestUseOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseOxyChargerEnd =_PNT("RequestUseOxyChargerEnd");
#else
const PNTCHAR* Proxy::RmiName_RequestUseOxyChargerEnd =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUseItemBox =_PNT("RequestUseItemBox");
#else
const PNTCHAR* Proxy::RmiName_RequestUseItemBox =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestOxyChargerStartSetup =_PNT("RequestOxyChargerStartSetup");
#else
const PNTCHAR* Proxy::RmiName_RequestOxyChargerStartSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterStartSetup =_PNT("RequestShelterStartSetup");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterStartSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterDoorControl =_PNT("RequestShelterDoorControl");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterDoorControl =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestShelterEnter =_PNT("RequestShelterEnter");
#else
const PNTCHAR* Proxy::RmiName_RequestShelterEnter =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestItemDelete =_PNT("RequestItemDelete");
#else
const PNTCHAR* Proxy::RmiName_RequestItemDelete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyOtherClientJoin =_PNT("NotifyOtherClientJoin");
#else
const PNTCHAR* Proxy::RmiName_NotifyOtherClientJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerLost =_PNT("NotifyPlayerLost");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerLost =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerMove =_PNT("NotifyPlayerMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeleteItem =_PNT("NotifyDeleteItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeleteItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateItem =_PNT("NotifyCreateItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyStartItemBoxState =_PNT("NotifyStartItemBoxState");
#else
const PNTCHAR* Proxy::RmiName_NotifyStartItemBoxState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerEquipItem =_PNT("NotifyPlayerEquipItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerEquipItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerUnEquipItem =_PNT("NotifyPlayerUnEquipItem");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerUnEquipItem =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletCreate =_PNT("NotifyPlayerBulletCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletCreate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletMove =_PNT("NotifyPlayerBulletMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletDelete =_PNT("NotifyPlayerBulletDelete");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerBulletDelete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerAnimation =_PNT("NotifyPlayerAnimation");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerAnimation =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeHP =_PNT("NotifyPlayerChangeHP");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeHP =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeOxygen =_PNT("NotifyPlayerChangeOxygen");
#else
const PNTCHAR* Proxy::RmiName_NotifyPlayerChangeOxygen =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseOxyCharger =_PNT("NotifyUseOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseSuccessedOxyCharger =_PNT("NotifyUseSuccessedOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseSuccessedOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseFailedOxyCharger =_PNT("NotifyUseFailedOxyCharger");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseFailedOxyCharger =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUseItemBox =_PNT("NotifyUseItemBox");
#else
const PNTCHAR* Proxy::RmiName_NotifyUseItemBox =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyShelterInfo =_PNT("NotifyShelterInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyShelterInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreateTime =_PNT("NotifyMeteorCreateTime");
#else
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreateTime =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreate =_PNT("NotifyMeteorCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyMeteorCreate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySpaceShipEngineCharge =_PNT("NotifySpaceShipEngineCharge");
#else
const PNTCHAR* Proxy::RmiName_NotifySpaceShipEngineCharge =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGrenadeCreate =_PNT("NotifyGrenadeCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyGrenadeCreate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGrenadeMove =_PNT("NotifyGrenadeMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyGrenadeMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGrenadeBoom =_PNT("NotifyGrenadeBoom");
#else
const PNTCHAR* Proxy::RmiName_NotifyGrenadeBoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGrenadeRemove =_PNT("NotifyGrenadeRemove");
#else
const PNTCHAR* Proxy::RmiName_NotifyGrenadeRemove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestHpUpdate =_PNT("RequestHpUpdate");
#else
const PNTCHAR* Proxy::RmiName_RequestHpUpdate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDrawGame =_PNT("NotifyDrawGame");
#else
const PNTCHAR* Proxy::RmiName_NotifyDrawGame =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestDrawGameResult =_PNT("RequestDrawGameResult");
#else
const PNTCHAR* Proxy::RmiName_RequestDrawGameResult =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestSpaceShip =_PNT("RequestSpaceShip");
#else
const PNTCHAR* Proxy::RmiName_RequestSpaceShip =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestGameEnd =_PNT("RequestGameEnd");
#else
const PNTCHAR* Proxy::RmiName_RequestGameEnd =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyKillInfo =_PNT("NotifyKillInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyKillInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGameResultInfoMe =_PNT("NotifyGameResultInfoMe");
#else
const PNTCHAR* Proxy::RmiName_NotifyGameResultInfoMe =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGameResultInfoOther =_PNT("NotifyGameResultInfoOther");
#else
const PNTCHAR* Proxy::RmiName_NotifyGameResultInfoOther =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGameResultShow =_PNT("NotifyGameResultShow");
#else
const PNTCHAR* Proxy::RmiName_NotifyGameResultShow =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestSpaceShipSetup =_PNT("RequestSpaceShipSetup");
#else
const PNTCHAR* Proxy::RmiName_RequestSpaceShipSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneCommingTime =_PNT("NotifyDeathZoneCommingTime");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneCommingTime =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneCreate =_PNT("NotifyDeathZoneCreate");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneCreate =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestDeathZoneMoveIndex =_PNT("RequestDeathZoneMoveIndex");
#else
const PNTCHAR* Proxy::RmiName_RequestDeathZoneMoveIndex =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneMoveHostAndIndexSetup =_PNT("NotifyDeathZoneMoveHostAndIndexSetup");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneMoveHostAndIndexSetup =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneMove =_PNT("NotifyDeathZoneMove");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeathZoneMove =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestGameExit;
}

