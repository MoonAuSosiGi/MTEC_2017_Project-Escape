  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "SpaceWar_stub.h"


const unsigned char sz_SpaceWar_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   

namespace SpaceWar
{
	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_SpaceWar_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_RequestServerConnect:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string id; __msg >> id;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestServerConnect);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,id);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerConnect;
						summary.m_rmiName = RmiName_RequestServerConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestServerConnect (remote,ctx , id );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestServerConnect);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerConnect;
						summary.m_rmiName = RmiName_RequestServerConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestClientJoin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestClientJoin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestClientJoin;
						summary.m_rmiName = RmiName_RequestClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestClientJoin (remote,ctx , hostID, name, x, y, z );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestClientJoin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestClientJoin;
						summary.m_rmiName = RmiName_RequestClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestWorldCreateItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					int itemCID; __msg >> itemCID;
					int itemID; __msg >> itemID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestWorldCreateItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemCID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestWorldCreateItem;
						summary.m_rmiName = RmiName_RequestWorldCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestWorldCreateItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestWorldCreateItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestWorldCreateItem;
						summary.m_rmiName = RmiName_RequestWorldCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestPlayerDamage:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int targetHostID; __msg >> targetHostID;
					string name; __msg >> name;
					string weaponName; __msg >> weaponName;
					float damage; __msg >> damage;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestPlayerDamage);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,targetHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,weaponName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,damage);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerDamage;
						summary.m_rmiName = RmiName_RequestPlayerDamage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestPlayerDamage (remote,ctx , sendHostID, targetHostID, name, weaponName, damage );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestPlayerDamage);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerDamage;
						summary.m_rmiName = RmiName_RequestPlayerDamage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestPlayerUseOxy:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float useOxy; __msg >> useOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestPlayerUseOxy);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,useOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerUseOxy;
						summary.m_rmiName = RmiName_RequestPlayerUseOxy;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestPlayerUseOxy (remote,ctx , sendHostID, name, useOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestPlayerUseOxy);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerUseOxy;
						summary.m_rmiName = RmiName_RequestPlayerUseOxy;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestUseOxyCharger:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int oxyChargerIndex; __msg >> oxyChargerIndex;
					float userOxy; __msg >> userOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUseOxyCharger);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxyChargerIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseOxyCharger;
						summary.m_rmiName = RmiName_RequestUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUseOxyCharger);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseOxyCharger;
						summary.m_rmiName = RmiName_RequestUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestUseItemBox:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int itemBoxIndex; __msg >> itemBoxIndex;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUseItemBox);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemBoxIndex);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseItemBox;
						summary.m_rmiName = RmiName_RequestUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestUseItemBox (remote,ctx , sendHostID, itemBoxIndex );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUseItemBox);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseItemBox;
						summary.m_rmiName = RmiName_RequestUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterStartSetup:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int shelterID; __msg >> shelterID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterStartSetup);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,shelterID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterStartSetup;
						summary.m_rmiName = RmiName_RequestShelterStartSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterStartSetup (remote,ctx , shelterID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterStartSetup);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterStartSetup;
						summary.m_rmiName = RmiName_RequestShelterStartSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterDoorControl:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool doorState; __msg >> doorState;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterDoorControl);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,doorState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterDoorControl;
						summary.m_rmiName = RmiName_RequestShelterDoorControl;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterDoorControl (remote,ctx , sendHostID, shelterID, doorState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterDoorControl);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterDoorControl;
						summary.m_rmiName = RmiName_RequestShelterDoorControl;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterEnter:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool enter; __msg >> enter;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterEnter);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,enter);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterEnter;
						summary.m_rmiName = RmiName_RequestShelterEnter;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterEnter (remote,ctx , sendHostID, shelterID, enter );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterEnter);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterEnter;
						summary.m_rmiName = RmiName_RequestShelterEnter;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginSuccess (remote,ctx , hostID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginFailed (remote,ctx , reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyOtherClientJoin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyOtherClientJoin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyOtherClientJoin;
						summary.m_rmiName = RmiName_NotifyOtherClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyOtherClientJoin (remote,ctx , hostID, name, x, y, z );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyOtherClientJoin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyOtherClientJoin;
						summary.m_rmiName = RmiName_NotifyOtherClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerLost:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerLost);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerLost;
						summary.m_rmiName = RmiName_NotifyPlayerLost;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerLost (remote,ctx , hostID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerLost);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerLost;
						summary.m_rmiName = RmiName_NotifyPlayerLost;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float curX; __msg >> curX;
					float curY; __msg >> curY;
					float curZ; __msg >> curZ;
					float velocityX; __msg >> velocityX;
					float velocityY; __msg >> velocityY;
					float velocityZ; __msg >> velocityZ;
					float crx; __msg >> crx;
					float cry; __msg >> cry;
					float crz; __msg >> crz;
					float rx; __msg >> rx;
					float ry; __msg >> ry;
					float rz; __msg >> rz;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curZ);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityZ);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,crx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,cry);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,crz);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ry);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rz);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerMove;
						summary.m_rmiName = RmiName_NotifyPlayerMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerMove (remote,ctx , hostID, name, curX, curY, curZ, velocityX, velocityY, velocityZ, crx, cry, crz, rx, ry, rz );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerMove;
						summary.m_rmiName = RmiName_NotifyPlayerMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDeleteItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int itemID; __msg >> itemID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeleteItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,itemID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeleteItem;
						summary.m_rmiName = RmiName_NotifyDeleteItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDeleteItem (remote,ctx , itemID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeleteItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeleteItem;
						summary.m_rmiName = RmiName_NotifyDeleteItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyCreateItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					int itemCID; __msg >> itemCID;
					int itemID; __msg >> itemID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyCreateItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemCID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyCreateItem;
						summary.m_rmiName = RmiName_NotifyCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyCreateItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyCreateItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyCreateItem;
						summary.m_rmiName = RmiName_NotifyCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyStartOxyChargerState:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int oxyChargerID; __msg >> oxyChargerID;
					float oxy; __msg >> oxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyStartOxyChargerState);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,oxyChargerID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
						summary.m_rmiName = RmiName_NotifyStartOxyChargerState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyStartOxyChargerState (remote,ctx , oxyChargerID, oxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyStartOxyChargerState);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
						summary.m_rmiName = RmiName_NotifyStartOxyChargerState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyStartItemBoxState:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int itemBoxID; __msg >> itemBoxID;
					bool openState; __msg >> openState;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyStartItemBoxState);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,itemBoxID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,openState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartItemBoxState;
						summary.m_rmiName = RmiName_NotifyStartItemBoxState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyStartItemBoxState (remote,ctx , itemBoxID, openState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyStartItemBoxState);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartItemBoxState;
						summary.m_rmiName = RmiName_NotifyStartItemBoxState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerEquipItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					int itemCID; __msg >> itemCID;
					int itemID; __msg >> itemID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerEquipItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemCID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerEquipItem (remote,ctx , hostID, itemCID, itemID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerEquipItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerUnEquipItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					int itemCID; __msg >> itemCID;
					int itemID; __msg >> itemID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerUnEquipItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemCID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerUnEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerUnEquipItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerUnEquipItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerUnEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletType; __msg >> bulletType;
					string bulletID; __msg >> bulletID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
						summary.m_rmiName = RmiName_NotifyPlayerBulletCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletCreate (remote,ctx , sendHostID, bulletType, bulletID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
						summary.m_rmiName = RmiName_NotifyPlayerBulletCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletID; __msg >> bulletID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 velocity; __msg >> velocity;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocity);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
						summary.m_rmiName = RmiName_NotifyPlayerBulletMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletMove (remote,ctx , sendHostID, bulletID, pos, velocity, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
						summary.m_rmiName = RmiName_NotifyPlayerBulletMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletDelete:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletID; __msg >> bulletID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletDelete);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
						summary.m_rmiName = RmiName_NotifyPlayerBulletDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletDelete (remote,ctx , sendHostID, bulletID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletDelete);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
						summary.m_rmiName = RmiName_NotifyPlayerBulletDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerAnimation:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					string animationName; __msg >> animationName;
					int aniValue; __msg >> aniValue;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerAnimation);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animationName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,aniValue);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerAnimation;
						summary.m_rmiName = RmiName_NotifyPlayerAnimation;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerAnimation (remote,ctx , hostID, name, animationName, aniValue );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerAnimation);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerAnimation;
						summary.m_rmiName = RmiName_NotifyPlayerAnimation;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerChangeHP:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float hp; __msg >> hp;
					float prevhp; __msg >> prevhp;
					float maxhp; __msg >> maxhp;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerChangeHP);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hp);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,prevhp);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxhp);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
						summary.m_rmiName = RmiName_NotifyPlayerChangeHP;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerChangeHP (remote,ctx , sendHostID, name, hp, prevhp, maxhp );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeHP);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
						summary.m_rmiName = RmiName_NotifyPlayerChangeHP;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerChangeOxygen:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float oxygen; __msg >> oxygen;
					float prevoxy; __msg >> prevoxy;
					float maxoxy; __msg >> maxoxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerChangeOxygen);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxygen);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,prevoxy);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxoxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
						summary.m_rmiName = RmiName_NotifyPlayerChangeOxygen;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerChangeOxygen (remote,ctx , sendHostID, name, oxygen, prevoxy, maxoxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeOxygen);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
						summary.m_rmiName = RmiName_NotifyPlayerChangeOxygen;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyUseOxyCharger:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int oxyChargerIndex; __msg >> oxyChargerIndex;
					float userOxy; __msg >> userOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUseOxyCharger);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxyChargerIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseOxyCharger;
						summary.m_rmiName = RmiName_NotifyUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUseOxyCharger);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseOxyCharger;
						summary.m_rmiName = RmiName_NotifyUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyUseItemBox:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int itemBoxIndex; __msg >> itemBoxIndex;
					int itemID; __msg >> itemID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUseItemBox);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemBoxIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseItemBox;
						summary.m_rmiName = RmiName_NotifyUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyUseItemBox (remote,ctx , sendHostID, itemBoxIndex, itemID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUseItemBox);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseItemBox;
						summary.m_rmiName = RmiName_NotifyUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyShelterInfo:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool doorState; __msg >> doorState;
					bool lightState; __msg >> lightState;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyShelterInfo);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,doorState);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,lightState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyShelterInfo;
						summary.m_rmiName = RmiName_NotifyShelterInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyShelterInfo (remote,ctx , sendHostID, shelterID, doorState, lightState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyShelterInfo);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyShelterInfo;
						summary.m_rmiName = RmiName_NotifyShelterInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyMeteorCreateTime:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int time; __msg >> time;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyMeteorCreateTime);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,time);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
						summary.m_rmiName = RmiName_NotifyMeteorCreateTime;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyMeteorCreateTime (remote,ctx , time );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreateTime);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
						summary.m_rmiName = RmiName_NotifyMeteorCreateTime;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyMeteorCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float anglex; __msg >> anglex;
					float anglez; __msg >> anglez;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyMeteorCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,anglex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,anglez);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreate;
						summary.m_rmiName = RmiName_NotifyMeteorCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyMeteorCreate (remote,ctx , anglex, anglez );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreate;
						summary.m_rmiName = RmiName_NotifyMeteorCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestServerConnect =_PNT("RequestServerConnect");
	#else
	const PNTCHAR* Stub::RmiName_RequestServerConnect =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestClientJoin =_PNT("RequestClientJoin");
	#else
	const PNTCHAR* Stub::RmiName_RequestClientJoin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestWorldCreateItem =_PNT("RequestWorldCreateItem");
	#else
	const PNTCHAR* Stub::RmiName_RequestWorldCreateItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestPlayerDamage =_PNT("RequestPlayerDamage");
	#else
	const PNTCHAR* Stub::RmiName_RequestPlayerDamage =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestPlayerUseOxy =_PNT("RequestPlayerUseOxy");
	#else
	const PNTCHAR* Stub::RmiName_RequestPlayerUseOxy =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUseOxyCharger =_PNT("RequestUseOxyCharger");
	#else
	const PNTCHAR* Stub::RmiName_RequestUseOxyCharger =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUseItemBox =_PNT("RequestUseItemBox");
	#else
	const PNTCHAR* Stub::RmiName_RequestUseItemBox =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterStartSetup =_PNT("RequestShelterStartSetup");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterStartSetup =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterDoorControl =_PNT("RequestShelterDoorControl");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterDoorControl =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterEnter =_PNT("RequestShelterEnter");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterEnter =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyOtherClientJoin =_PNT("NotifyOtherClientJoin");
	#else
	const PNTCHAR* Stub::RmiName_NotifyOtherClientJoin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerLost =_PNT("NotifyPlayerLost");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerLost =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerMove =_PNT("NotifyPlayerMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeleteItem =_PNT("NotifyDeleteItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeleteItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyCreateItem =_PNT("NotifyCreateItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyCreateItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyStartOxyChargerState =_PNT("NotifyStartOxyChargerState");
	#else
	const PNTCHAR* Stub::RmiName_NotifyStartOxyChargerState =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyStartItemBoxState =_PNT("NotifyStartItemBoxState");
	#else
	const PNTCHAR* Stub::RmiName_NotifyStartItemBoxState =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerEquipItem =_PNT("NotifyPlayerEquipItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerEquipItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerUnEquipItem =_PNT("NotifyPlayerUnEquipItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerUnEquipItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletCreate =_PNT("NotifyPlayerBulletCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletCreate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletMove =_PNT("NotifyPlayerBulletMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletDelete =_PNT("NotifyPlayerBulletDelete");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletDelete =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerAnimation =_PNT("NotifyPlayerAnimation");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerAnimation =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeHP =_PNT("NotifyPlayerChangeHP");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeHP =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeOxygen =_PNT("NotifyPlayerChangeOxygen");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeOxygen =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUseOxyCharger =_PNT("NotifyUseOxyCharger");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUseOxyCharger =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUseItemBox =_PNT("NotifyUseItemBox");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUseItemBox =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyShelterInfo =_PNT("NotifyShelterInfo");
	#else
	const PNTCHAR* Stub::RmiName_NotifyShelterInfo =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreateTime =_PNT("NotifyMeteorCreateTime");
	#else
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreateTime =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreate =_PNT("NotifyMeteorCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreate =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestServerConnect;
}

