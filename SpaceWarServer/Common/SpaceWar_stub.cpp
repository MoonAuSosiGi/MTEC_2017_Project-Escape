  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "SpaceWar_stub.h"


const unsigned char sz_SpaceWar_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   

namespace SpaceWar
{
	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_SpaceWar_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_RequestGameExit:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestGameExit);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestGameExit, 
							RmiName_RequestGameExit,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameExit, 
							RmiName_RequestGameExit, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameExit, 
							RmiName_RequestGameExit, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameExit;
						summary.m_rmiName = RmiName_RequestGameExit;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestGameExit (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestGameExit);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameExit;
						summary.m_rmiName = RmiName_RequestGameExit;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestServerConnect:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string id; __msg >> id;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestServerConnect);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,id);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerConnect, 
							RmiName_RequestServerConnect, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerConnect;
						summary.m_rmiName = RmiName_RequestServerConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestServerConnect (remote,ctx , id );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestServerConnect);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerConnect;
						summary.m_rmiName = RmiName_RequestServerConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestLobbyConnect:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestLobbyConnect);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestLobbyConnect, 
							RmiName_RequestLobbyConnect,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLobbyConnect, 
							RmiName_RequestLobbyConnect, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLobbyConnect, 
							RmiName_RequestLobbyConnect, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLobbyConnect;
						summary.m_rmiName = RmiName_RequestLobbyConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestLobbyConnect (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestLobbyConnect);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLobbyConnect;
						summary.m_rmiName = RmiName_RequestLobbyConnect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkGameTeamSelect:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string name; __msg >> name;
					bool teamRed; __msg >> teamRed;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkGameTeamSelect);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,teamRed);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect, 
							RmiName_RequestNetworkGameTeamSelect,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect, 
							RmiName_RequestNetworkGameTeamSelect, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect, 
							RmiName_RequestNetworkGameTeamSelect, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect;
						summary.m_rmiName = RmiName_RequestNetworkGameTeamSelect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkGameTeamSelect (remote,ctx , name, teamRed );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameTeamSelect);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameTeamSelect;
						summary.m_rmiName = RmiName_RequestNetworkGameTeamSelect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkGameReady:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string name; __msg >> name;
					bool ready; __msg >> ready;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkGameReady);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ready);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameReady, 
							RmiName_RequestNetworkGameReady,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameReady, 
							RmiName_RequestNetworkGameReady, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameReady, 
							RmiName_RequestNetworkGameReady, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameReady;
						summary.m_rmiName = RmiName_RequestNetworkGameReady;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkGameReady (remote,ctx , name, ready );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameReady);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameReady;
						summary.m_rmiName = RmiName_RequestNetworkGameReady;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkChangeMap:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string mapName; __msg >> mapName;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkChangeMap);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,mapName);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkChangeMap, 
							RmiName_RequestNetworkChangeMap,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkChangeMap, 
							RmiName_RequestNetworkChangeMap, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkChangeMap, 
							RmiName_RequestNetworkChangeMap, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkChangeMap;
						summary.m_rmiName = RmiName_RequestNetworkChangeMap;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkChangeMap (remote,ctx , mapName );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkChangeMap);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkChangeMap;
						summary.m_rmiName = RmiName_RequestNetworkChangeMap;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkPlayerCount:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int playerCount; __msg >> playerCount;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkPlayerCount);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,playerCount);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkPlayerCount, 
							RmiName_RequestNetworkPlayerCount,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkPlayerCount, 
							RmiName_RequestNetworkPlayerCount, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkPlayerCount, 
							RmiName_RequestNetworkPlayerCount, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkPlayerCount;
						summary.m_rmiName = RmiName_RequestNetworkPlayerCount;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkPlayerCount (remote,ctx , playerCount );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkPlayerCount);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkPlayerCount;
						summary.m_rmiName = RmiName_RequestNetworkPlayerCount;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkGameModeChange:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int gameMode; __msg >> gameMode;
					bool teamMode; __msg >> teamMode;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkGameModeChange);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,gameMode);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,teamMode);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameModeChange, 
							RmiName_RequestNetworkGameModeChange,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameModeChange, 
							RmiName_RequestNetworkGameModeChange, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameModeChange, 
							RmiName_RequestNetworkGameModeChange, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameModeChange;
						summary.m_rmiName = RmiName_RequestNetworkGameModeChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkGameModeChange (remote,ctx , gameMode, teamMode );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameModeChange);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameModeChange;
						summary.m_rmiName = RmiName_RequestNetworkGameModeChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkGameStart:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkGameStart);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameStart, 
							RmiName_RequestNetworkGameStart,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameStart, 
							RmiName_RequestNetworkGameStart, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkGameStart, 
							RmiName_RequestNetworkGameStart, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameStart;
						summary.m_rmiName = RmiName_RequestNetworkGameStart;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkGameStart (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameStart);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkGameStart;
						summary.m_rmiName = RmiName_RequestNetworkGameStart;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestNetworkHostOut:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNetworkHostOut);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNetworkHostOut, 
							RmiName_RequestNetworkHostOut,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkHostOut, 
							RmiName_RequestNetworkHostOut, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNetworkHostOut, 
							RmiName_RequestNetworkHostOut, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkHostOut;
						summary.m_rmiName = RmiName_RequestNetworkHostOut;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestNetworkHostOut (remote,ctx , hostID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNetworkHostOut);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNetworkHostOut;
						summary.m_rmiName = RmiName_RequestNetworkHostOut;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestGameSceneJoin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					Proud::Vector3 pos; __msg >> pos;
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestGameSceneJoin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestGameSceneJoin, 
							RmiName_RequestGameSceneJoin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameSceneJoin, 
							RmiName_RequestGameSceneJoin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameSceneJoin, 
							RmiName_RequestGameSceneJoin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameSceneJoin;
						summary.m_rmiName = RmiName_RequestGameSceneJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestGameSceneJoin (remote,ctx , pos, hostID, name );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestGameSceneJoin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameSceneJoin;
						summary.m_rmiName = RmiName_RequestGameSceneJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkUserSetup:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int userHostID; __msg >> userHostID;
					string userName; __msg >> userName;
					bool ready; __msg >> ready;
					bool teamRed; __msg >> teamRed;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkUserSetup);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,userHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ready);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,teamRed);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkUserSetup, 
							RmiName_NotifyNetworkUserSetup,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkUserSetup, 
							RmiName_NotifyNetworkUserSetup, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkUserSetup, 
							RmiName_NotifyNetworkUserSetup, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkUserSetup;
						summary.m_rmiName = RmiName_NotifyNetworkUserSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkUserSetup (remote,ctx , userHostID, userName, ready, teamRed );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkUserSetup);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkUserSetup;
						summary.m_rmiName = RmiName_NotifyNetworkUserSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameTeamChange:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int userHostID; __msg >> userHostID;
					bool teamRed; __msg >> teamRed;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameTeamChange);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,userHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,teamRed);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange, 
							RmiName_NotifyNetworkGameTeamChange,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange, 
							RmiName_NotifyNetworkGameTeamChange, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange, 
							RmiName_NotifyNetworkGameTeamChange, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange;
						summary.m_rmiName = RmiName_NotifyNetworkGameTeamChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameTeamChange (remote,ctx , userHostID, teamRed );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameTeamChange);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameTeamChange;
						summary.m_rmiName = RmiName_NotifyNetworkGameTeamChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkConnectUser:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int userHostID; __msg >> userHostID;
					string userName; __msg >> userName;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkConnectUser);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,userHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userName);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkConnectUser, 
							RmiName_NotifyNetworkConnectUser,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkConnectUser, 
							RmiName_NotifyNetworkConnectUser, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkConnectUser, 
							RmiName_NotifyNetworkConnectUser, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkConnectUser;
						summary.m_rmiName = RmiName_NotifyNetworkConnectUser;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkConnectUser (remote,ctx , userHostID, userName );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkConnectUser);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkConnectUser;
						summary.m_rmiName = RmiName_NotifyNetworkConnectUser;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkReady:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string userName; __msg >> userName;
					bool ready; __msg >> ready;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkReady);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ready);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkReady, 
							RmiName_NotifyNetworkReady,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkReady, 
							RmiName_NotifyNetworkReady, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkReady, 
							RmiName_NotifyNetworkReady, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkReady;
						summary.m_rmiName = RmiName_NotifyNetworkReady;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkReady (remote,ctx , hostID, userName, ready );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkReady);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkReady;
						summary.m_rmiName = RmiName_NotifyNetworkReady;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameModeChange:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int gameMode; __msg >> gameMode;
					bool teamMode; __msg >> teamMode;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameModeChange);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,gameMode);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,teamMode);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange, 
							RmiName_NotifyNetworkGameModeChange,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange, 
							RmiName_NotifyNetworkGameModeChange, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange, 
							RmiName_NotifyNetworkGameModeChange, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange;
						summary.m_rmiName = RmiName_NotifyNetworkGameModeChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameModeChange (remote,ctx , gameMode, teamMode );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameModeChange);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameModeChange;
						summary.m_rmiName = RmiName_NotifyNetworkGameModeChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGamePlayerCountChange:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int playerCount; __msg >> playerCount;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGamePlayerCountChange);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,playerCount);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange, 
							RmiName_NotifyNetworkGamePlayerCountChange,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange, 
							RmiName_NotifyNetworkGamePlayerCountChange, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange, 
							RmiName_NotifyNetworkGamePlayerCountChange, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange;
						summary.m_rmiName = RmiName_NotifyNetworkGamePlayerCountChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGamePlayerCountChange (remote,ctx , playerCount );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGamePlayerCountChange);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGamePlayerCountChange;
						summary.m_rmiName = RmiName_NotifyNetworkGamePlayerCountChange;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameChangeMap:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string map; __msg >> map;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameChangeMap);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,map);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap, 
							RmiName_NotifyNetworkGameChangeMap,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap, 
							RmiName_NotifyNetworkGameChangeMap, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap, 
							RmiName_NotifyNetworkGameChangeMap, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap;
						summary.m_rmiName = RmiName_NotifyNetworkGameChangeMap;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameChangeMap (remote,ctx , map );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameChangeMap);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameChangeMap;
						summary.m_rmiName = RmiName_NotifyNetworkGameChangeMap;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameStart:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameStart);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStart, 
							RmiName_NotifyNetworkGameStart,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStart, 
							RmiName_NotifyNetworkGameStart, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStart, 
							RmiName_NotifyNetworkGameStart, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameStart;
						summary.m_rmiName = RmiName_NotifyNetworkGameStart;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameStart (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameStart);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameStart;
						summary.m_rmiName = RmiName_NotifyNetworkGameStart;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameStartFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameStartFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed, 
							RmiName_NotifyNetworkGameStartFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed, 
							RmiName_NotifyNetworkGameStartFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed, 
							RmiName_NotifyNetworkGameStartFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed;
						summary.m_rmiName = RmiName_NotifyNetworkGameStartFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameStartFailed (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameStartFailed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameStartFailed;
						summary.m_rmiName = RmiName_NotifyNetworkGameStartFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyNetworkGameHostOut:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNetworkGameHostOut);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut, 
							RmiName_NotifyNetworkGameHostOut,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut, 
							RmiName_NotifyNetworkGameHostOut, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut, 
							RmiName_NotifyNetworkGameHostOut, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut;
						summary.m_rmiName = RmiName_NotifyNetworkGameHostOut;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyNetworkGameHostOut (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameHostOut);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNetworkGameHostOut;
						summary.m_rmiName = RmiName_NotifyNetworkGameHostOut;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestClientJoin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestClientJoin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestClientJoin, 
							RmiName_RequestClientJoin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestClientJoin;
						summary.m_rmiName = RmiName_RequestClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestClientJoin (remote,ctx , hostID, name, x, y, z );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestClientJoin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestClientJoin;
						summary.m_rmiName = RmiName_RequestClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestWorldCreateItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string itemID; __msg >> itemID;
					string networkID; __msg >> networkID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestWorldCreateItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestWorldCreateItem, 
							RmiName_RequestWorldCreateItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestWorldCreateItem;
						summary.m_rmiName = RmiName_RequestWorldCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestWorldCreateItem (remote,ctx , hostID, itemID, networkID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestWorldCreateItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestWorldCreateItem;
						summary.m_rmiName = RmiName_RequestWorldCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestPlayerDamage:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int targetHostID; __msg >> targetHostID;
					string name; __msg >> name;
					string weaponName; __msg >> weaponName;
					float damage; __msg >> damage;
					Proud::Vector3 dir; __msg >> dir;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestPlayerDamage);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,targetHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,weaponName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,damage);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,dir);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerDamage, 
							RmiName_RequestPlayerDamage, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerDamage;
						summary.m_rmiName = RmiName_RequestPlayerDamage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestPlayerDamage (remote,ctx , sendHostID, targetHostID, name, weaponName, damage, dir );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestPlayerDamage);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerDamage;
						summary.m_rmiName = RmiName_RequestPlayerDamage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestPlayerUseOxy:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float useOxy; __msg >> useOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestPlayerUseOxy);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,useOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestPlayerUseOxy, 
							RmiName_RequestPlayerUseOxy, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerUseOxy;
						summary.m_rmiName = RmiName_RequestPlayerUseOxy;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestPlayerUseOxy (remote,ctx , sendHostID, name, useOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestPlayerUseOxy);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestPlayerUseOxy;
						summary.m_rmiName = RmiName_RequestPlayerUseOxy;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestUseOxyCharger:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int oxyChargerIndex; __msg >> oxyChargerIndex;
					float userOxy; __msg >> userOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUseOxyCharger);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxyChargerIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseOxyCharger, 
							RmiName_RequestUseOxyCharger, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseOxyCharger;
						summary.m_rmiName = RmiName_RequestUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUseOxyCharger);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseOxyCharger;
						summary.m_rmiName = RmiName_RequestUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestUseItemBox:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int itemBoxIndex; __msg >> itemBoxIndex;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUseItemBox);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemBoxIndex);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUseItemBox, 
							RmiName_RequestUseItemBox, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseItemBox;
						summary.m_rmiName = RmiName_RequestUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestUseItemBox (remote,ctx , sendHostID, itemBoxIndex );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUseItemBox);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUseItemBox;
						summary.m_rmiName = RmiName_RequestUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterStartSetup:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int shelterID; __msg >> shelterID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterStartSetup);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,shelterID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterStartSetup, 
							RmiName_RequestShelterStartSetup, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterStartSetup;
						summary.m_rmiName = RmiName_RequestShelterStartSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterStartSetup (remote,ctx , shelterID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterStartSetup);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterStartSetup;
						summary.m_rmiName = RmiName_RequestShelterStartSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterDoorControl:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool doorState; __msg >> doorState;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterDoorControl);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,doorState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterDoorControl, 
							RmiName_RequestShelterDoorControl, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterDoorControl;
						summary.m_rmiName = RmiName_RequestShelterDoorControl;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterDoorControl (remote,ctx , sendHostID, shelterID, doorState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterDoorControl);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterDoorControl;
						summary.m_rmiName = RmiName_RequestShelterDoorControl;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestShelterEnter:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool enter; __msg >> enter;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestShelterEnter);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,enter);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestShelterEnter, 
							RmiName_RequestShelterEnter, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterEnter;
						summary.m_rmiName = RmiName_RequestShelterEnter;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestShelterEnter (remote,ctx , sendHostID, shelterID, enter );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestShelterEnter);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestShelterEnter;
						summary.m_rmiName = RmiName_RequestShelterEnter;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestItemDelete:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int itemID; __msg >> itemID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestItemDelete);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,itemID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestItemDelete, 
							RmiName_RequestItemDelete,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestItemDelete, 
							RmiName_RequestItemDelete, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestItemDelete, 
							RmiName_RequestItemDelete, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestItemDelete;
						summary.m_rmiName = RmiName_RequestItemDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestItemDelete (remote,ctx , itemID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestItemDelete);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestItemDelete;
						summary.m_rmiName = RmiName_RequestItemDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					bool host; __msg >> host;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,host);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginSuccess (remote,ctx , hostID, host );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginFailed (remote,ctx , reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyOtherClientJoin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyOtherClientJoin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyOtherClientJoin, 
							RmiName_NotifyOtherClientJoin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyOtherClientJoin;
						summary.m_rmiName = RmiName_NotifyOtherClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyOtherClientJoin (remote,ctx , hostID, name, x, y, z );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyOtherClientJoin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyOtherClientJoin;
						summary.m_rmiName = RmiName_NotifyOtherClientJoin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerLost:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerLost);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerLost, 
							RmiName_NotifyPlayerLost, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerLost;
						summary.m_rmiName = RmiName_NotifyPlayerLost;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerLost (remote,ctx , hostID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerLost);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerLost;
						summary.m_rmiName = RmiName_NotifyPlayerLost;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					float curX; __msg >> curX;
					float curY; __msg >> curY;
					float curZ; __msg >> curZ;
					float velocityX; __msg >> velocityX;
					float velocityY; __msg >> velocityY;
					float velocityZ; __msg >> velocityZ;
					float crx; __msg >> crx;
					float cry; __msg >> cry;
					float crz; __msg >> crz;
					float rx; __msg >> rx;
					float ry; __msg >> ry;
					float rz; __msg >> rz;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,curZ);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocityZ);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,crx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,cry);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,crz);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ry);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rz);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerMove, 
							RmiName_NotifyPlayerMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerMove;
						summary.m_rmiName = RmiName_NotifyPlayerMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerMove (remote,ctx , hostID, name, curX, curY, curZ, velocityX, velocityY, velocityZ, crx, cry, crz, rx, ry, rz );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerMove;
						summary.m_rmiName = RmiName_NotifyPlayerMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDeleteItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string networkID; __msg >> networkID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeleteItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,networkID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeleteItem, 
							RmiName_NotifyDeleteItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeleteItem;
						summary.m_rmiName = RmiName_NotifyDeleteItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDeleteItem (remote,ctx , networkID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeleteItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeleteItem;
						summary.m_rmiName = RmiName_NotifyDeleteItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyCreateItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string itemID; __msg >> itemID;
					string networkID; __msg >> networkID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyCreateItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyCreateItem, 
							RmiName_NotifyCreateItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyCreateItem;
						summary.m_rmiName = RmiName_NotifyCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyCreateItem (remote,ctx , hostID, itemID, networkID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyCreateItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyCreateItem;
						summary.m_rmiName = RmiName_NotifyCreateItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyStartOxyChargerState:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int oxyChargerID; __msg >> oxyChargerID;
					float oxy; __msg >> oxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyStartOxyChargerState);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,oxyChargerID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartOxyChargerState, 
							RmiName_NotifyStartOxyChargerState, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
						summary.m_rmiName = RmiName_NotifyStartOxyChargerState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyStartOxyChargerState (remote,ctx , oxyChargerID, oxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyStartOxyChargerState);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartOxyChargerState;
						summary.m_rmiName = RmiName_NotifyStartOxyChargerState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyStartItemBoxState:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int itemBoxID; __msg >> itemBoxID;
					bool openState; __msg >> openState;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyStartItemBoxState);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,itemBoxID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,openState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyStartItemBoxState, 
							RmiName_NotifyStartItemBoxState, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartItemBoxState;
						summary.m_rmiName = RmiName_NotifyStartItemBoxState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyStartItemBoxState (remote,ctx , itemBoxID, openState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyStartItemBoxState);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyStartItemBoxState;
						summary.m_rmiName = RmiName_NotifyStartItemBoxState;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerEquipItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string itemID; __msg >> itemID;
					string networkID; __msg >> networkID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerEquipItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerEquipItem, 
							RmiName_NotifyPlayerEquipItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerEquipItem (remote,ctx , hostID, itemID, networkID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerEquipItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerUnEquipItem:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string itemID; __msg >> itemID;
					string networkID; __msg >> networkID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerUnEquipItem);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem, 
							RmiName_NotifyPlayerUnEquipItem, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerUnEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerUnEquipItem (remote,ctx , hostID, itemID, networkID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerUnEquipItem);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerUnEquipItem;
						summary.m_rmiName = RmiName_NotifyPlayerUnEquipItem;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletID; __msg >> bulletID;
					string weaponID; __msg >> weaponID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,weaponID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate, 
							RmiName_NotifyPlayerBulletCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
						summary.m_rmiName = RmiName_NotifyPlayerBulletCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletCreate (remote,ctx , sendHostID, bulletID, weaponID, pos, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletCreate;
						summary.m_rmiName = RmiName_NotifyPlayerBulletCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletID; __msg >> bulletID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 velocity; __msg >> velocity;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocity);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletMove, 
							RmiName_NotifyPlayerBulletMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
						summary.m_rmiName = RmiName_NotifyPlayerBulletMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletMove (remote,ctx , sendHostID, bulletID, pos, velocity, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletMove;
						summary.m_rmiName = RmiName_NotifyPlayerBulletMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerBulletDelete:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string bulletID; __msg >> bulletID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerBulletDelete);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,bulletID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete, 
							RmiName_NotifyPlayerBulletDelete, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
						summary.m_rmiName = RmiName_NotifyPlayerBulletDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerBulletDelete (remote,ctx , sendHostID, bulletID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletDelete);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerBulletDelete;
						summary.m_rmiName = RmiName_NotifyPlayerBulletDelete;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerAnimation:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					string name; __msg >> name;
					string animationName; __msg >> animationName;
					int aniValue; __msg >> aniValue;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerAnimation);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animationName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,aniValue);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerAnimation, 
							RmiName_NotifyPlayerAnimation, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerAnimation;
						summary.m_rmiName = RmiName_NotifyPlayerAnimation;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerAnimation (remote,ctx , hostID, name, animationName, aniValue );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerAnimation);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerAnimation;
						summary.m_rmiName = RmiName_NotifyPlayerAnimation;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerChangeHP:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float hp; __msg >> hp;
					float prevhp; __msg >> prevhp;
					float maxhp; __msg >> maxhp;
					Proud::Vector3 dir; __msg >> dir;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerChangeHP);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hp);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,prevhp);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxhp);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,dir);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeHP, 
							RmiName_NotifyPlayerChangeHP, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
						summary.m_rmiName = RmiName_NotifyPlayerChangeHP;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerChangeHP (remote,ctx , sendHostID, name, hp, prevhp, maxhp, dir );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeHP);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeHP;
						summary.m_rmiName = RmiName_NotifyPlayerChangeHP;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyPlayerChangeOxygen:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string name; __msg >> name;
					float oxygen; __msg >> oxygen;
					float prevoxy; __msg >> prevoxy;
					float maxoxy; __msg >> maxoxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyPlayerChangeOxygen);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxygen);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,prevoxy);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxoxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen, 
							RmiName_NotifyPlayerChangeOxygen, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
						summary.m_rmiName = RmiName_NotifyPlayerChangeOxygen;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyPlayerChangeOxygen (remote,ctx , sendHostID, name, oxygen, prevoxy, maxoxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeOxygen);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyPlayerChangeOxygen;
						summary.m_rmiName = RmiName_NotifyPlayerChangeOxygen;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyUseOxyCharger:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int oxyChargerIndex; __msg >> oxyChargerIndex;
					float userOxy; __msg >> userOxy;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUseOxyCharger);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,oxyChargerIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userOxy);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseOxyCharger, 
							RmiName_NotifyUseOxyCharger, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseOxyCharger;
						summary.m_rmiName = RmiName_NotifyUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUseOxyCharger);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseOxyCharger;
						summary.m_rmiName = RmiName_NotifyUseOxyCharger;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyUseItemBox:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int itemBoxIndex; __msg >> itemBoxIndex;
					string itemID; __msg >> itemID;
					string networkID; __msg >> networkID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUseItemBox);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemBoxIndex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,itemID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUseItemBox, 
							RmiName_NotifyUseItemBox, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseItemBox;
						summary.m_rmiName = RmiName_NotifyUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyUseItemBox (remote,ctx , sendHostID, itemBoxIndex, itemID, networkID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUseItemBox);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUseItemBox;
						summary.m_rmiName = RmiName_NotifyUseItemBox;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyShelterInfo:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					int shelterID; __msg >> shelterID;
					bool doorState; __msg >> doorState;
					bool lightState; __msg >> lightState;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyShelterInfo);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shelterID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,doorState);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,lightState);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyShelterInfo, 
							RmiName_NotifyShelterInfo, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyShelterInfo;
						summary.m_rmiName = RmiName_NotifyShelterInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyShelterInfo (remote,ctx , sendHostID, shelterID, doorState, lightState );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyShelterInfo);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyShelterInfo;
						summary.m_rmiName = RmiName_NotifyShelterInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyMeteorCreateTime:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int time; __msg >> time;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyMeteorCreateTime);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,time);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreateTime, 
							RmiName_NotifyMeteorCreateTime, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
						summary.m_rmiName = RmiName_NotifyMeteorCreateTime;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyMeteorCreateTime (remote,ctx , time );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreateTime);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreateTime;
						summary.m_rmiName = RmiName_NotifyMeteorCreateTime;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyMeteorCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float anglex; __msg >> anglex;
					float anglez; __msg >> anglez;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyMeteorCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,anglex);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,anglez);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyMeteorCreate, 
							RmiName_NotifyMeteorCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreate;
						summary.m_rmiName = RmiName_NotifyMeteorCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyMeteorCreate (remote,ctx , anglex, anglez );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyMeteorCreate;
						summary.m_rmiName = RmiName_NotifyMeteorCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifySpaceShipEngineCharge:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int spaceShipID; __msg >> spaceShipID;
					float fuel; __msg >> fuel;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySpaceShipEngineCharge);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,spaceShipID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fuel);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge, 
							RmiName_NotifySpaceShipEngineCharge,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge, 
							RmiName_NotifySpaceShipEngineCharge, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge, 
							RmiName_NotifySpaceShipEngineCharge, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge;
						summary.m_rmiName = RmiName_NotifySpaceShipEngineCharge;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifySpaceShipEngineCharge (remote,ctx , spaceShipID, fuel );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySpaceShipEngineCharge);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySpaceShipEngineCharge;
						summary.m_rmiName = RmiName_NotifySpaceShipEngineCharge;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGrenadeCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string networkID; __msg >> networkID;
					Proud::Vector3 pos; __msg >> pos;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGrenadeCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeCreate, 
							RmiName_NotifyGrenadeCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeCreate, 
							RmiName_NotifyGrenadeCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeCreate, 
							RmiName_NotifyGrenadeCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeCreate;
						summary.m_rmiName = RmiName_NotifyGrenadeCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGrenadeCreate (remote,ctx , sendHostID, networkID, pos );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeCreate;
						summary.m_rmiName = RmiName_NotifyGrenadeCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGrenadeMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string networkID; __msg >> networkID;
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 velocity; __msg >> velocity;
					Proud::Vector3 rot; __msg >> rot;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGrenadeMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocity);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rot);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeMove, 
							RmiName_NotifyGrenadeMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeMove, 
							RmiName_NotifyGrenadeMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeMove, 
							RmiName_NotifyGrenadeMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeMove;
						summary.m_rmiName = RmiName_NotifyGrenadeMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGrenadeMove (remote,ctx , sendHostID, networkID, pos, velocity, rot );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeMove;
						summary.m_rmiName = RmiName_NotifyGrenadeMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGrenadeBoom:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int sendHostID; __msg >> sendHostID;
					string networkID; __msg >> networkID;
					bool isStone; __msg >> isStone;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGrenadeBoom);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sendHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,networkID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,isStone);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeBoom, 
							RmiName_NotifyGrenadeBoom,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeBoom, 
							RmiName_NotifyGrenadeBoom, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeBoom, 
							RmiName_NotifyGrenadeBoom, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeBoom;
						summary.m_rmiName = RmiName_NotifyGrenadeBoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGrenadeBoom (remote,ctx , sendHostID, networkID, isStone );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeBoom);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeBoom;
						summary.m_rmiName = RmiName_NotifyGrenadeBoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGrenadeRemove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string networkID; __msg >> networkID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGrenadeRemove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,networkID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeRemove, 
							RmiName_NotifyGrenadeRemove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeRemove, 
							RmiName_NotifyGrenadeRemove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGrenadeRemove, 
							RmiName_NotifyGrenadeRemove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeRemove;
						summary.m_rmiName = RmiName_NotifyGrenadeRemove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGrenadeRemove (remote,ctx , networkID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeRemove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGrenadeRemove;
						summary.m_rmiName = RmiName_NotifyGrenadeRemove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestHpUpdate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float hp; __msg >> hp;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestHpUpdate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hp);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestHpUpdate, 
							RmiName_RequestHpUpdate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestHpUpdate, 
							RmiName_RequestHpUpdate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestHpUpdate, 
							RmiName_RequestHpUpdate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestHpUpdate;
						summary.m_rmiName = RmiName_RequestHpUpdate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestHpUpdate (remote,ctx , hp );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestHpUpdate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestHpUpdate;
						summary.m_rmiName = RmiName_RequestHpUpdate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDrawGame:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDrawGame);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDrawGame, 
							RmiName_NotifyDrawGame,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDrawGame, 
							RmiName_NotifyDrawGame, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDrawGame, 
							RmiName_NotifyDrawGame, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDrawGame;
						summary.m_rmiName = RmiName_NotifyDrawGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDrawGame (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDrawGame);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDrawGame;
						summary.m_rmiName = RmiName_NotifyDrawGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestDrawGameResult:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestDrawGameResult);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestDrawGameResult, 
							RmiName_RequestDrawGameResult,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDrawGameResult, 
							RmiName_RequestDrawGameResult, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDrawGameResult, 
							RmiName_RequestDrawGameResult, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDrawGameResult;
						summary.m_rmiName = RmiName_RequestDrawGameResult;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestDrawGameResult (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestDrawGameResult);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDrawGameResult;
						summary.m_rmiName = RmiName_RequestDrawGameResult;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestSpaceShip:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int winPlayerID; __msg >> winPlayerID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestSpaceShip);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,winPlayerID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShip, 
							RmiName_RequestSpaceShip,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShip, 
							RmiName_RequestSpaceShip, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShip, 
							RmiName_RequestSpaceShip, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestSpaceShip;
						summary.m_rmiName = RmiName_RequestSpaceShip;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestSpaceShip (remote,ctx , winPlayerID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestSpaceShip);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestSpaceShip;
						summary.m_rmiName = RmiName_RequestSpaceShip;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestGameEnd:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestGameEnd);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestGameEnd, 
							RmiName_RequestGameEnd,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameEnd, 
							RmiName_RequestGameEnd, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestGameEnd, 
							RmiName_RequestGameEnd, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameEnd;
						summary.m_rmiName = RmiName_RequestGameEnd;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestGameEnd (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestGameEnd);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestGameEnd;
						summary.m_rmiName = RmiName_RequestGameEnd;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyKillInfo:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string targetName; __msg >> targetName;
					bool kill; __msg >> kill;
					int totalKill; __msg >> totalKill;
					int totalAssist; __msg >> totalAssist;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyKillInfo);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,targetName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,kill);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,totalKill);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,totalAssist);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyKillInfo, 
							RmiName_NotifyKillInfo,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyKillInfo, 
							RmiName_NotifyKillInfo, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyKillInfo, 
							RmiName_NotifyKillInfo, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyKillInfo;
						summary.m_rmiName = RmiName_NotifyKillInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyKillInfo (remote,ctx , targetName, kill, totalKill, totalAssist );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyKillInfo);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyKillInfo;
						summary.m_rmiName = RmiName_NotifyKillInfo;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGameResultInfoMe:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string gameMode; __msg >> gameMode;
					int winState; __msg >> winState;
					int playTime; __msg >> playTime;
					int kills; __msg >> kills;
					int assists; __msg >> assists;
					int death; __msg >> death;
					int getMoney; __msg >> getMoney;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGameResultInfoMe);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,gameMode);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,winState);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,playTime);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,kills);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,assists);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,death);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,getMoney);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoMe, 
							RmiName_NotifyGameResultInfoMe,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoMe, 
							RmiName_NotifyGameResultInfoMe, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoMe, 
							RmiName_NotifyGameResultInfoMe, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultInfoMe;
						summary.m_rmiName = RmiName_NotifyGameResultInfoMe;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGameResultInfoMe (remote,ctx , gameMode, winState, playTime, kills, assists, death, getMoney );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoMe);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultInfoMe;
						summary.m_rmiName = RmiName_NotifyGameResultInfoMe;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGameResultInfoOther:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					string name; __msg >> name;
					int state; __msg >> state;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGameResultInfoOther);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,name);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,state);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoOther, 
							RmiName_NotifyGameResultInfoOther,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoOther, 
							RmiName_NotifyGameResultInfoOther, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultInfoOther, 
							RmiName_NotifyGameResultInfoOther, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultInfoOther;
						summary.m_rmiName = RmiName_NotifyGameResultInfoOther;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGameResultInfoOther (remote,ctx , name, state );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoOther);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultInfoOther;
						summary.m_rmiName = RmiName_NotifyGameResultInfoOther;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyGameResultShow:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyGameResultShow);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultShow, 
							RmiName_NotifyGameResultShow,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultShow, 
							RmiName_NotifyGameResultShow, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyGameResultShow, 
							RmiName_NotifyGameResultShow, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultShow;
						summary.m_rmiName = RmiName_NotifyGameResultShow;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyGameResultShow (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyGameResultShow);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyGameResultShow;
						summary.m_rmiName = RmiName_NotifyGameResultShow;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestSpaceShipSetup:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int spaceShipCount; __msg >> spaceShipCount;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestSpaceShipSetup);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,spaceShipCount);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShipSetup, 
							RmiName_RequestSpaceShipSetup,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShipSetup, 
							RmiName_RequestSpaceShipSetup, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestSpaceShipSetup, 
							RmiName_RequestSpaceShipSetup, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestSpaceShipSetup;
						summary.m_rmiName = RmiName_RequestSpaceShipSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestSpaceShipSetup (remote,ctx , spaceShipCount );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestSpaceShipSetup);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestSpaceShipSetup;
						summary.m_rmiName = RmiName_RequestSpaceShipSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDeathZoneCreate:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int spaceShipIndex; __msg >> spaceShipIndex;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeathZoneCreate);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,spaceShipIndex);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneCreate, 
							RmiName_NotifyDeathZoneCreate,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneCreate, 
							RmiName_NotifyDeathZoneCreate, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneCreate, 
							RmiName_NotifyDeathZoneCreate, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneCreate;
						summary.m_rmiName = RmiName_NotifyDeathZoneCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDeathZoneCreate (remote,ctx , spaceShipIndex );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneCreate);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneCreate;
						summary.m_rmiName = RmiName_NotifyDeathZoneCreate;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestDeathZoneMoveIndex:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int moveIndex; __msg >> moveIndex;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestDeathZoneMoveIndex);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,moveIndex);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex, 
							RmiName_RequestDeathZoneMoveIndex,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex, 
							RmiName_RequestDeathZoneMoveIndex, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex, 
							RmiName_RequestDeathZoneMoveIndex, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex;
						summary.m_rmiName = RmiName_RequestDeathZoneMoveIndex;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestDeathZoneMoveIndex (remote,ctx , moveIndex );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestDeathZoneMoveIndex);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDeathZoneMoveIndex;
						summary.m_rmiName = RmiName_RequestDeathZoneMoveIndex;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDeathZoneMoveHostAndIndexSetup:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int moveHostID; __msg >> moveHostID;
					int currentIndex; __msg >> currentIndex;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeathZoneMoveHostAndIndexSetup);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,moveHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,currentIndex);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup, 
							RmiName_NotifyDeathZoneMoveHostAndIndexSetup,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup, 
							RmiName_NotifyDeathZoneMoveHostAndIndexSetup, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup, 
							RmiName_NotifyDeathZoneMoveHostAndIndexSetup, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup;
						summary.m_rmiName = RmiName_NotifyDeathZoneMoveHostAndIndexSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDeathZoneMoveHostAndIndexSetup (remote,ctx , moveHostID, currentIndex );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneMoveHostAndIndexSetup);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneMoveHostAndIndexSetup;
						summary.m_rmiName = RmiName_NotifyDeathZoneMoveHostAndIndexSetup;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyDeathZoneMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					Proud::Vector3 pos; __msg >> pos;
					Proud::Vector3 velocity; __msg >> velocity;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeathZoneMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,pos);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,velocity);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMove, 
							RmiName_NotifyDeathZoneMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMove, 
							RmiName_NotifyDeathZoneMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeathZoneMove, 
							RmiName_NotifyDeathZoneMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneMove;
						summary.m_rmiName = RmiName_NotifyDeathZoneMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyDeathZoneMove (remote,ctx , pos, velocity );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeathZoneMove;
						summary.m_rmiName = RmiName_NotifyDeathZoneMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestGameExit =_PNT("RequestGameExit");
	#else
	const PNTCHAR* Stub::RmiName_RequestGameExit =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestServerConnect =_PNT("RequestServerConnect");
	#else
	const PNTCHAR* Stub::RmiName_RequestServerConnect =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestLobbyConnect =_PNT("RequestLobbyConnect");
	#else
	const PNTCHAR* Stub::RmiName_RequestLobbyConnect =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkGameTeamSelect =_PNT("RequestNetworkGameTeamSelect");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkGameTeamSelect =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkGameReady =_PNT("RequestNetworkGameReady");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkGameReady =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkChangeMap =_PNT("RequestNetworkChangeMap");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkChangeMap =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkPlayerCount =_PNT("RequestNetworkPlayerCount");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkPlayerCount =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkGameModeChange =_PNT("RequestNetworkGameModeChange");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkGameModeChange =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkGameStart =_PNT("RequestNetworkGameStart");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkGameStart =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNetworkHostOut =_PNT("RequestNetworkHostOut");
	#else
	const PNTCHAR* Stub::RmiName_RequestNetworkHostOut =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestGameSceneJoin =_PNT("RequestGameSceneJoin");
	#else
	const PNTCHAR* Stub::RmiName_RequestGameSceneJoin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkUserSetup =_PNT("NotifyNetworkUserSetup");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkUserSetup =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameTeamChange =_PNT("NotifyNetworkGameTeamChange");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameTeamChange =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkConnectUser =_PNT("NotifyNetworkConnectUser");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkConnectUser =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkReady =_PNT("NotifyNetworkReady");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkReady =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameModeChange =_PNT("NotifyNetworkGameModeChange");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameModeChange =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGamePlayerCountChange =_PNT("NotifyNetworkGamePlayerCountChange");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGamePlayerCountChange =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameChangeMap =_PNT("NotifyNetworkGameChangeMap");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameChangeMap =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameStart =_PNT("NotifyNetworkGameStart");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameStart =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameStartFailed =_PNT("NotifyNetworkGameStartFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameStartFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameHostOut =_PNT("NotifyNetworkGameHostOut");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNetworkGameHostOut =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestClientJoin =_PNT("RequestClientJoin");
	#else
	const PNTCHAR* Stub::RmiName_RequestClientJoin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestWorldCreateItem =_PNT("RequestWorldCreateItem");
	#else
	const PNTCHAR* Stub::RmiName_RequestWorldCreateItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestPlayerDamage =_PNT("RequestPlayerDamage");
	#else
	const PNTCHAR* Stub::RmiName_RequestPlayerDamage =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestPlayerUseOxy =_PNT("RequestPlayerUseOxy");
	#else
	const PNTCHAR* Stub::RmiName_RequestPlayerUseOxy =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUseOxyCharger =_PNT("RequestUseOxyCharger");
	#else
	const PNTCHAR* Stub::RmiName_RequestUseOxyCharger =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUseItemBox =_PNT("RequestUseItemBox");
	#else
	const PNTCHAR* Stub::RmiName_RequestUseItemBox =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterStartSetup =_PNT("RequestShelterStartSetup");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterStartSetup =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterDoorControl =_PNT("RequestShelterDoorControl");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterDoorControl =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestShelterEnter =_PNT("RequestShelterEnter");
	#else
	const PNTCHAR* Stub::RmiName_RequestShelterEnter =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestItemDelete =_PNT("RequestItemDelete");
	#else
	const PNTCHAR* Stub::RmiName_RequestItemDelete =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyOtherClientJoin =_PNT("NotifyOtherClientJoin");
	#else
	const PNTCHAR* Stub::RmiName_NotifyOtherClientJoin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerLost =_PNT("NotifyPlayerLost");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerLost =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerMove =_PNT("NotifyPlayerMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeleteItem =_PNT("NotifyDeleteItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeleteItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyCreateItem =_PNT("NotifyCreateItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyCreateItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyStartOxyChargerState =_PNT("NotifyStartOxyChargerState");
	#else
	const PNTCHAR* Stub::RmiName_NotifyStartOxyChargerState =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyStartItemBoxState =_PNT("NotifyStartItemBoxState");
	#else
	const PNTCHAR* Stub::RmiName_NotifyStartItemBoxState =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerEquipItem =_PNT("NotifyPlayerEquipItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerEquipItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerUnEquipItem =_PNT("NotifyPlayerUnEquipItem");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerUnEquipItem =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletCreate =_PNT("NotifyPlayerBulletCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletCreate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletMove =_PNT("NotifyPlayerBulletMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletDelete =_PNT("NotifyPlayerBulletDelete");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerBulletDelete =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerAnimation =_PNT("NotifyPlayerAnimation");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerAnimation =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeHP =_PNT("NotifyPlayerChangeHP");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeHP =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeOxygen =_PNT("NotifyPlayerChangeOxygen");
	#else
	const PNTCHAR* Stub::RmiName_NotifyPlayerChangeOxygen =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUseOxyCharger =_PNT("NotifyUseOxyCharger");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUseOxyCharger =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUseItemBox =_PNT("NotifyUseItemBox");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUseItemBox =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyShelterInfo =_PNT("NotifyShelterInfo");
	#else
	const PNTCHAR* Stub::RmiName_NotifyShelterInfo =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreateTime =_PNT("NotifyMeteorCreateTime");
	#else
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreateTime =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreate =_PNT("NotifyMeteorCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyMeteorCreate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySpaceShipEngineCharge =_PNT("NotifySpaceShipEngineCharge");
	#else
	const PNTCHAR* Stub::RmiName_NotifySpaceShipEngineCharge =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGrenadeCreate =_PNT("NotifyGrenadeCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGrenadeCreate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGrenadeMove =_PNT("NotifyGrenadeMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGrenadeMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGrenadeBoom =_PNT("NotifyGrenadeBoom");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGrenadeBoom =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGrenadeRemove =_PNT("NotifyGrenadeRemove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGrenadeRemove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestHpUpdate =_PNT("RequestHpUpdate");
	#else
	const PNTCHAR* Stub::RmiName_RequestHpUpdate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDrawGame =_PNT("NotifyDrawGame");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDrawGame =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestDrawGameResult =_PNT("RequestDrawGameResult");
	#else
	const PNTCHAR* Stub::RmiName_RequestDrawGameResult =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestSpaceShip =_PNT("RequestSpaceShip");
	#else
	const PNTCHAR* Stub::RmiName_RequestSpaceShip =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestGameEnd =_PNT("RequestGameEnd");
	#else
	const PNTCHAR* Stub::RmiName_RequestGameEnd =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyKillInfo =_PNT("NotifyKillInfo");
	#else
	const PNTCHAR* Stub::RmiName_NotifyKillInfo =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGameResultInfoMe =_PNT("NotifyGameResultInfoMe");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGameResultInfoMe =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGameResultInfoOther =_PNT("NotifyGameResultInfoOther");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGameResultInfoOther =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyGameResultShow =_PNT("NotifyGameResultShow");
	#else
	const PNTCHAR* Stub::RmiName_NotifyGameResultShow =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestSpaceShipSetup =_PNT("RequestSpaceShipSetup");
	#else
	const PNTCHAR* Stub::RmiName_RequestSpaceShipSetup =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneCreate =_PNT("NotifyDeathZoneCreate");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneCreate =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestDeathZoneMoveIndex =_PNT("RequestDeathZoneMoveIndex");
	#else
	const PNTCHAR* Stub::RmiName_RequestDeathZoneMoveIndex =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneMoveHostAndIndexSetup =_PNT("NotifyDeathZoneMoveHostAndIndexSetup");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneMoveHostAndIndexSetup =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneMove =_PNT("NotifyDeathZoneMove");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeathZoneMove =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestGameExit;
}

