




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

            
using Nettention.Proud; 
namespace SpaceWar
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestGameExitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestGameExitDelegate RequestGameExit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestServerConnectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id);  
		public RequestServerConnectDelegate RequestServerConnect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id)
		{ 
			return false;
		};
		public delegate bool RequestLobbyConnectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestLobbyConnectDelegate RequestLobbyConnect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestNetworkGameTeamSelectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, bool teamRed);  
		public RequestNetworkGameTeamSelectDelegate RequestNetworkGameTeamSelect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, bool teamRed)
		{ 
			return false;
		};
		public delegate bool RequestNetworkGameReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, bool ready);  
		public RequestNetworkGameReadyDelegate RequestNetworkGameReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, bool ready)
		{ 
			return false;
		};
		public delegate bool RequestNetworkChangeMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string mapName);  
		public RequestNetworkChangeMapDelegate RequestNetworkChangeMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string mapName)
		{ 
			return false;
		};
		public delegate bool RequestNetworkPlayerCountDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int playerCount);  
		public RequestNetworkPlayerCountDelegate RequestNetworkPlayerCount = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int playerCount)
		{ 
			return false;
		};
		public delegate bool RequestNetworkGameModeChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int gameMode, bool teamMode);  
		public RequestNetworkGameModeChangeDelegate RequestNetworkGameModeChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int gameMode, bool teamMode)
		{ 
			return false;
		};
		public delegate bool RequestNetworkGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestNetworkGameStartDelegate RequestNetworkGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestNetworkHostOutDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID);  
		public RequestNetworkHostOutDelegate RequestNetworkHostOut = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID)
		{ 
			return false;
		};
		public delegate bool RequestGameSceneJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, int hostID, string name);  
		public RequestGameSceneJoinDelegate RequestGameSceneJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, int hostID, string name)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkUserSetupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, string userName, bool ready, bool teamRed);  
		public NotifyNetworkUserSetupDelegate NotifyNetworkUserSetup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, string userName, bool ready, bool teamRed)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameTeamChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, bool teamRed);  
		public NotifyNetworkGameTeamChangeDelegate NotifyNetworkGameTeamChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, bool teamRed)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkConnectUserDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, string userName);  
		public NotifyNetworkConnectUserDelegate NotifyNetworkConnectUser = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int userHostID, string userName)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string userName, bool ready);  
		public NotifyNetworkReadyDelegate NotifyNetworkReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string userName, bool ready)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameModeChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int gameMode, bool teamMode);  
		public NotifyNetworkGameModeChangeDelegate NotifyNetworkGameModeChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int gameMode, bool teamMode)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGamePlayerCountChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int playerCount);  
		public NotifyNetworkGamePlayerCountChangeDelegate NotifyNetworkGamePlayerCountChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int playerCount)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameChangeMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string map);  
		public NotifyNetworkGameChangeMapDelegate NotifyNetworkGameChangeMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string map)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyNetworkGameStartDelegate NotifyNetworkGameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameStartFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyNetworkGameStartFailedDelegate NotifyNetworkGameStartFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyNetworkGameHostOutDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyNetworkGameHostOutDelegate NotifyNetworkGameHostOut = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestClientJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z);  
		public RequestClientJoinDelegate RequestClientJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z)
		{ 
			return false;
		};
		public delegate bool RequestWorldCreateItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public RequestWorldCreateItemDelegate RequestWorldCreateItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool RequestPlayerDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int targetHostID, string name, string weaponName, float damage, UnityEngine.Vector3 dir);  
		public RequestPlayerDamageDelegate RequestPlayerDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int targetHostID, string name, string weaponName, float damage, UnityEngine.Vector3 dir)
		{ 
			return false;
		};
		public delegate bool RequestPlayerUseOxyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float useOxy);  
		public RequestPlayerUseOxyDelegate RequestPlayerUseOxy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float useOxy)
		{ 
			return false;
		};
		public delegate bool RequestUseOxyChargerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy);  
		public RequestUseOxyChargerDelegate RequestUseOxyCharger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy)
		{ 
			return false;
		};
		public delegate bool RequestUseItemBoxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex);  
		public RequestUseItemBoxDelegate RequestUseItemBox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex)
		{ 
			return false;
		};
		public delegate bool RequestShelterStartSetupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shelterID);  
		public RequestShelterStartSetupDelegate RequestShelterStartSetup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shelterID)
		{ 
			return false;
		};
		public delegate bool RequestShelterDoorControlDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState);  
		public RequestShelterDoorControlDelegate RequestShelterDoorControl = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState)
		{ 
			return false;
		};
		public delegate bool RequestShelterEnterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool enter);  
		public RequestShelterEnterDelegate RequestShelterEnter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool enter)
		{ 
			return false;
		};
		public delegate bool RequestItemDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemID);  
		public RequestItemDeleteDelegate RequestItemDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemID)
		{ 
			return false;
		};
		public delegate bool NotifyLoginSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, bool host);  
		public NotifyLoginSuccessDelegate NotifyLoginSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, bool host)
		{ 
			return false;
		};
		public delegate bool NotifyLoginFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string reason);  
		public NotifyLoginFailedDelegate NotifyLoginFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string reason)
		{ 
			return false;
		};
		public delegate bool NotifyOtherClientJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z);  
		public NotifyOtherClientJoinDelegate NotifyOtherClientJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerLostDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID);  
		public NotifyPlayerLostDelegate NotifyPlayerLost = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float curX, float curY, float curZ, float velocityX, float velocityY, float velocityZ, float crx, float cry, float crz, float rx, float ry, float rz);  
		public NotifyPlayerMoveDelegate NotifyPlayerMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float curX, float curY, float curZ, float velocityX, float velocityY, float velocityZ, float crx, float cry, float crz, float rx, float ry, float rz)
		{ 
			return false;
		};
		public delegate bool NotifyDeleteItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string networkID);  
		public NotifyDeleteItemDelegate NotifyDeleteItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string networkID)
		{ 
			return false;
		};
		public delegate bool NotifyCreateItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyCreateItemDelegate NotifyCreateItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyStartOxyChargerStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int oxyChargerID, float oxy);  
		public NotifyStartOxyChargerStateDelegate NotifyStartOxyChargerState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int oxyChargerID, float oxy)
		{ 
			return false;
		};
		public delegate bool NotifyStartItemBoxStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemBoxID, bool openState);  
		public NotifyStartItemBoxStateDelegate NotifyStartItemBoxState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemBoxID, bool openState)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerEquipItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID);  
		public NotifyPlayerEquipItemDelegate NotifyPlayerEquipItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerUnEquipItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyPlayerUnEquipItemDelegate NotifyPlayerUnEquipItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string itemID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, string weaponID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyPlayerBulletCreateDelegate NotifyPlayerBulletCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, string weaponID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot);  
		public NotifyPlayerBulletMoveDelegate NotifyPlayerBulletMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID);  
		public NotifyPlayerBulletDeleteDelegate NotifyPlayerBulletDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerAnimationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, string animationName, int aniValue);  
		public NotifyPlayerAnimationDelegate NotifyPlayerAnimation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, string animationName, int aniValue)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerChangeHPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float hp, float prevhp, float maxhp, UnityEngine.Vector3 dir);  
		public NotifyPlayerChangeHPDelegate NotifyPlayerChangeHP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float hp, float prevhp, float maxhp, UnityEngine.Vector3 dir)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerChangeOxygenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float oxygen, float prevoxy, float maxoxy);  
		public NotifyPlayerChangeOxygenDelegate NotifyPlayerChangeOxygen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float oxygen, float prevoxy, float maxoxy)
		{ 
			return false;
		};
		public delegate bool NotifyUseOxyChargerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy);  
		public NotifyUseOxyChargerDelegate NotifyUseOxyCharger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy)
		{ 
			return false;
		};
		public delegate bool NotifyUseItemBoxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex, string itemID, string networkID);  
		public NotifyUseItemBoxDelegate NotifyUseItemBox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex, string itemID, string networkID)
		{ 
			return false;
		};
		public delegate bool NotifyShelterInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState, bool lightState);  
		public NotifyShelterInfoDelegate NotifyShelterInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState, bool lightState)
		{ 
			return false;
		};
		public delegate bool NotifyMeteorCreateTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time);  
		public NotifyMeteorCreateTimeDelegate NotifyMeteorCreateTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time)
		{ 
			return false;
		};
		public delegate bool NotifyMeteorCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float anglex, float anglez);  
		public NotifyMeteorCreateDelegate NotifyMeteorCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float anglex, float anglez)
		{ 
			return false;
		};
		public delegate bool NotifySpaceShipEngineChargeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipID, float fuel);  
		public NotifySpaceShipEngineChargeDelegate NotifySpaceShipEngineCharge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipID, float fuel)
		{ 
			return false;
		};
		public delegate bool NotifyGrenadeCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, UnityEngine.Vector3 pos);  
		public NotifyGrenadeCreateDelegate NotifyGrenadeCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, UnityEngine.Vector3 pos)
		{ 
			return false;
		};
		public delegate bool NotifyGrenadeMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot);  
		public NotifyGrenadeMoveDelegate NotifyGrenadeMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyGrenadeBoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, bool isStone);  
		public NotifyGrenadeBoomDelegate NotifyGrenadeBoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string networkID, bool isStone)
		{ 
			return false;
		};
		public delegate bool NotifyGrenadeRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string networkID);  
		public NotifyGrenadeRemoveDelegate NotifyGrenadeRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string networkID)
		{ 
			return false;
		};
		public delegate bool RequestHpUpdateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float hp);  
		public RequestHpUpdateDelegate RequestHpUpdate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float hp)
		{ 
			return false;
		};
		public delegate bool NotifyDrawGameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyDrawGameDelegate NotifyDrawGame = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestDrawGameResultDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestDrawGameResultDelegate RequestDrawGameResult = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestSpaceShipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int winPlayerID);  
		public RequestSpaceShipDelegate RequestSpaceShip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int winPlayerID)
		{ 
			return false;
		};
		public delegate bool RequestGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestGameEndDelegate RequestGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyKillInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName, bool kill, int totalKill, int totalAssist);  
		public NotifyKillInfoDelegate NotifyKillInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName, bool kill, int totalKill, int totalAssist)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultInfoMeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string gameMode, int winState, int playTime, int kills, int assists, int death, int getMoney);  
		public NotifyGameResultInfoMeDelegate NotifyGameResultInfoMe = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string gameMode, int winState, int playTime, int kills, int assists, int death, int getMoney)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultInfoOtherDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int state);  
		public NotifyGameResultInfoOtherDelegate NotifyGameResultInfoOther = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int state)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultShowDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyGameResultShowDelegate NotifyGameResultShow = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestSpaceShipSetupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipCount);  
		public RequestSpaceShipSetupDelegate RequestSpaceShipSetup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipCount)
		{ 
			return false;
		};
		public delegate bool NotifyDeathZoneCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipIndex);  
		public NotifyDeathZoneCreateDelegate NotifyDeathZoneCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipIndex)
		{ 
			return false;
		};
		public delegate bool RequestDeathZoneMoveIndexDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int moveIndex);  
		public RequestDeathZoneMoveIndexDelegate RequestDeathZoneMoveIndex = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int moveIndex)
		{ 
			return false;
		};
		public delegate bool NotifyDeathZoneMoveHostAndIndexSetupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int moveHostID, int currentIndex);  
		public NotifyDeathZoneMoveHostAndIndexSetupDelegate NotifyDeathZoneMoveHostAndIndexSetup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int moveHostID, int currentIndex)
		{ 
			return false;
		};
		public delegate bool NotifyDeathZoneMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity);  
		public NotifyDeathZoneMoveDelegate NotifyDeathZoneMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.RequestGameExit:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestGameExit);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestGameExit, RmiName_RequestGameExit,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestGameExit;
			summary.rmiName = RmiName_RequestGameExit;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestGameExit (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestGameExit);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestGameExit;
			summary.rmiName = RmiName_RequestGameExit;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestServerConnect:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string id; SP_Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestServerConnect);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=id.ToString()+",";
			NotifyCallFromStub(Common.RequestServerConnect, RmiName_RequestServerConnect,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestServerConnect;
			summary.rmiName = RmiName_RequestServerConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestServerConnect (remote,ctx , id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestServerConnect);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestServerConnect;
			summary.rmiName = RmiName_RequestServerConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestLobbyConnect:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestLobbyConnect);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestLobbyConnect, RmiName_RequestLobbyConnect,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestLobbyConnect;
			summary.rmiName = RmiName_RequestLobbyConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestLobbyConnect (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestLobbyConnect);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestLobbyConnect;
			summary.rmiName = RmiName_RequestLobbyConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkGameTeamSelect:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string name; SP_Marshaler.Read(__msg,out name);	
bool teamRed; SP_Marshaler.Read(__msg,out teamRed);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkGameTeamSelect);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=name.ToString()+",";
parameterString+=teamRed.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkGameTeamSelect, RmiName_RequestNetworkGameTeamSelect,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkGameTeamSelect;
			summary.rmiName = RmiName_RequestNetworkGameTeamSelect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkGameTeamSelect (remote,ctx , name, teamRed );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameTeamSelect);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkGameTeamSelect;
			summary.rmiName = RmiName_RequestNetworkGameTeamSelect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkGameReady:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string name; SP_Marshaler.Read(__msg,out name);	
bool ready; SP_Marshaler.Read(__msg,out ready);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkGameReady);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=name.ToString()+",";
parameterString+=ready.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkGameReady, RmiName_RequestNetworkGameReady,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkGameReady;
			summary.rmiName = RmiName_RequestNetworkGameReady;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkGameReady (remote,ctx , name, ready );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameReady);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkGameReady;
			summary.rmiName = RmiName_RequestNetworkGameReady;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkChangeMap:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string mapName; SP_Marshaler.Read(__msg,out mapName);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkChangeMap);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=mapName.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkChangeMap, RmiName_RequestNetworkChangeMap,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkChangeMap;
			summary.rmiName = RmiName_RequestNetworkChangeMap;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkChangeMap (remote,ctx , mapName );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkChangeMap);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkChangeMap;
			summary.rmiName = RmiName_RequestNetworkChangeMap;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkPlayerCount:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int playerCount; SP_Marshaler.Read(__msg,out playerCount);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkPlayerCount);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=playerCount.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkPlayerCount, RmiName_RequestNetworkPlayerCount,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkPlayerCount;
			summary.rmiName = RmiName_RequestNetworkPlayerCount;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkPlayerCount (remote,ctx , playerCount );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkPlayerCount);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkPlayerCount;
			summary.rmiName = RmiName_RequestNetworkPlayerCount;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkGameModeChange:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int gameMode; SP_Marshaler.Read(__msg,out gameMode);	
bool teamMode; SP_Marshaler.Read(__msg,out teamMode);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkGameModeChange);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=gameMode.ToString()+",";
parameterString+=teamMode.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkGameModeChange, RmiName_RequestNetworkGameModeChange,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkGameModeChange;
			summary.rmiName = RmiName_RequestNetworkGameModeChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkGameModeChange (remote,ctx , gameMode, teamMode );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameModeChange);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkGameModeChange;
			summary.rmiName = RmiName_RequestNetworkGameModeChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkGameStart:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestNetworkGameStart);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestNetworkGameStart, RmiName_RequestNetworkGameStart,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkGameStart;
			summary.rmiName = RmiName_RequestNetworkGameStart;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkGameStart (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkGameStart);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkGameStart;
			summary.rmiName = RmiName_RequestNetworkGameStart;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestNetworkHostOut:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
core.PostCheckReadMessage(__msg, RmiName_RequestNetworkHostOut);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
			NotifyCallFromStub(Common.RequestNetworkHostOut, RmiName_RequestNetworkHostOut,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestNetworkHostOut;
			summary.rmiName = RmiName_RequestNetworkHostOut;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestNetworkHostOut (remote,ctx , hostID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestNetworkHostOut);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestNetworkHostOut;
			summary.rmiName = RmiName_RequestNetworkHostOut;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestGameSceneJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGameSceneJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=pos.ToString()+",";
parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
			NotifyCallFromStub(Common.RequestGameSceneJoin, RmiName_RequestGameSceneJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestGameSceneJoin;
			summary.rmiName = RmiName_RequestGameSceneJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestGameSceneJoin (remote,ctx , pos, hostID, name );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestGameSceneJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestGameSceneJoin;
			summary.rmiName = RmiName_RequestGameSceneJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkUserSetup:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int userHostID; SP_Marshaler.Read(__msg,out userHostID);	
string userName; SP_Marshaler.Read(__msg,out userName);	
bool ready; SP_Marshaler.Read(__msg,out ready);	
bool teamRed; SP_Marshaler.Read(__msg,out teamRed);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkUserSetup);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=userHostID.ToString()+",";
parameterString+=userName.ToString()+",";
parameterString+=ready.ToString()+",";
parameterString+=teamRed.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkUserSetup, RmiName_NotifyNetworkUserSetup,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkUserSetup;
			summary.rmiName = RmiName_NotifyNetworkUserSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkUserSetup (remote,ctx , userHostID, userName, ready, teamRed );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkUserSetup);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkUserSetup;
			summary.rmiName = RmiName_NotifyNetworkUserSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameTeamChange:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int userHostID; SP_Marshaler.Read(__msg,out userHostID);	
bool teamRed; SP_Marshaler.Read(__msg,out teamRed);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameTeamChange);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=userHostID.ToString()+",";
parameterString+=teamRed.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkGameTeamChange, RmiName_NotifyNetworkGameTeamChange,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameTeamChange;
			summary.rmiName = RmiName_NotifyNetworkGameTeamChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameTeamChange (remote,ctx , userHostID, teamRed );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameTeamChange);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameTeamChange;
			summary.rmiName = RmiName_NotifyNetworkGameTeamChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkConnectUser:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int userHostID; SP_Marshaler.Read(__msg,out userHostID);	
string userName; SP_Marshaler.Read(__msg,out userName);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkConnectUser);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=userHostID.ToString()+",";
parameterString+=userName.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkConnectUser, RmiName_NotifyNetworkConnectUser,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkConnectUser;
			summary.rmiName = RmiName_NotifyNetworkConnectUser;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkConnectUser (remote,ctx , userHostID, userName );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkConnectUser);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkConnectUser;
			summary.rmiName = RmiName_NotifyNetworkConnectUser;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkReady:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string userName; SP_Marshaler.Read(__msg,out userName);	
bool ready; SP_Marshaler.Read(__msg,out ready);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkReady);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=userName.ToString()+",";
parameterString+=ready.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkReady, RmiName_NotifyNetworkReady,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkReady;
			summary.rmiName = RmiName_NotifyNetworkReady;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkReady (remote,ctx , hostID, userName, ready );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkReady);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkReady;
			summary.rmiName = RmiName_NotifyNetworkReady;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameModeChange:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int gameMode; SP_Marshaler.Read(__msg,out gameMode);	
bool teamMode; SP_Marshaler.Read(__msg,out teamMode);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameModeChange);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=gameMode.ToString()+",";
parameterString+=teamMode.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkGameModeChange, RmiName_NotifyNetworkGameModeChange,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameModeChange;
			summary.rmiName = RmiName_NotifyNetworkGameModeChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameModeChange (remote,ctx , gameMode, teamMode );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameModeChange);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameModeChange;
			summary.rmiName = RmiName_NotifyNetworkGameModeChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGamePlayerCountChange:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int playerCount; SP_Marshaler.Read(__msg,out playerCount);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGamePlayerCountChange);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=playerCount.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkGamePlayerCountChange, RmiName_NotifyNetworkGamePlayerCountChange,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGamePlayerCountChange;
			summary.rmiName = RmiName_NotifyNetworkGamePlayerCountChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGamePlayerCountChange (remote,ctx , playerCount );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGamePlayerCountChange);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGamePlayerCountChange;
			summary.rmiName = RmiName_NotifyNetworkGamePlayerCountChange;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameChangeMap:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string map; SP_Marshaler.Read(__msg,out map);	
core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameChangeMap);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=map.ToString()+",";
			NotifyCallFromStub(Common.NotifyNetworkGameChangeMap, RmiName_NotifyNetworkGameChangeMap,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameChangeMap;
			summary.rmiName = RmiName_NotifyNetworkGameChangeMap;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameChangeMap (remote,ctx , map );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameChangeMap);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameChangeMap;
			summary.rmiName = RmiName_NotifyNetworkGameChangeMap;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameStart:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameStart);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyNetworkGameStart, RmiName_NotifyNetworkGameStart,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameStart;
			summary.rmiName = RmiName_NotifyNetworkGameStart;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameStart (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameStart);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameStart;
			summary.rmiName = RmiName_NotifyNetworkGameStart;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameStartFailed:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameStartFailed);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyNetworkGameStartFailed, RmiName_NotifyNetworkGameStartFailed,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameStartFailed;
			summary.rmiName = RmiName_NotifyNetworkGameStartFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameStartFailed (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameStartFailed);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameStartFailed;
			summary.rmiName = RmiName_NotifyNetworkGameStartFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyNetworkGameHostOut:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyNetworkGameHostOut);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyNetworkGameHostOut, RmiName_NotifyNetworkGameHostOut,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameHostOut;
			summary.rmiName = RmiName_NotifyNetworkGameHostOut;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyNetworkGameHostOut (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyNetworkGameHostOut);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyNetworkGameHostOut;
			summary.rmiName = RmiName_NotifyNetworkGameHostOut;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestClientJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float x; SP_Marshaler.Read(__msg,out x);	
float y; SP_Marshaler.Read(__msg,out y);	
float z; SP_Marshaler.Read(__msg,out z);	
core.PostCheckReadMessage(__msg, RmiName_RequestClientJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
			NotifyCallFromStub(Common.RequestClientJoin, RmiName_RequestClientJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestClientJoin;
			summary.rmiName = RmiName_RequestClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestClientJoin (remote,ctx , hostID, name, x, y, z );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestClientJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestClientJoin;
			summary.rmiName = RmiName_RequestClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestWorldCreateItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string itemID; SP_Marshaler.Read(__msg,out itemID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_RequestWorldCreateItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.RequestWorldCreateItem, RmiName_RequestWorldCreateItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestWorldCreateItem;
			summary.rmiName = RmiName_RequestWorldCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestWorldCreateItem (remote,ctx , hostID, itemID, networkID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestWorldCreateItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestWorldCreateItem;
			summary.rmiName = RmiName_RequestWorldCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestPlayerDamage:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int targetHostID; SP_Marshaler.Read(__msg,out targetHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
string weaponName; SP_Marshaler.Read(__msg,out weaponName);	
float damage; SP_Marshaler.Read(__msg,out damage);	
UnityEngine.Vector3 dir; SP_Marshaler.Read(__msg,out dir);	
core.PostCheckReadMessage(__msg, RmiName_RequestPlayerDamage);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=targetHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=weaponName.ToString()+",";
parameterString+=damage.ToString()+",";
parameterString+=dir.ToString()+",";
			NotifyCallFromStub(Common.RequestPlayerDamage, RmiName_RequestPlayerDamage,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestPlayerDamage;
			summary.rmiName = RmiName_RequestPlayerDamage;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestPlayerDamage (remote,ctx , sendHostID, targetHostID, name, weaponName, damage, dir );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestPlayerDamage);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestPlayerDamage;
			summary.rmiName = RmiName_RequestPlayerDamage;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestPlayerUseOxy:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float useOxy; SP_Marshaler.Read(__msg,out useOxy);	
core.PostCheckReadMessage(__msg, RmiName_RequestPlayerUseOxy);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=useOxy.ToString()+",";
			NotifyCallFromStub(Common.RequestPlayerUseOxy, RmiName_RequestPlayerUseOxy,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestPlayerUseOxy;
			summary.rmiName = RmiName_RequestPlayerUseOxy;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestPlayerUseOxy (remote,ctx , sendHostID, name, useOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestPlayerUseOxy);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestPlayerUseOxy;
			summary.rmiName = RmiName_RequestPlayerUseOxy;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestUseOxyCharger:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int oxyChargerIndex; SP_Marshaler.Read(__msg,out oxyChargerIndex);	
float userOxy; SP_Marshaler.Read(__msg,out userOxy);	
core.PostCheckReadMessage(__msg, RmiName_RequestUseOxyCharger);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=oxyChargerIndex.ToString()+",";
parameterString+=userOxy.ToString()+",";
			NotifyCallFromStub(Common.RequestUseOxyCharger, RmiName_RequestUseOxyCharger,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestUseOxyCharger;
			summary.rmiName = RmiName_RequestUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestUseOxyCharger);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestUseOxyCharger;
			summary.rmiName = RmiName_RequestUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestUseItemBox:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int itemBoxIndex; SP_Marshaler.Read(__msg,out itemBoxIndex);	
core.PostCheckReadMessage(__msg, RmiName_RequestUseItemBox);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=itemBoxIndex.ToString()+",";
			NotifyCallFromStub(Common.RequestUseItemBox, RmiName_RequestUseItemBox,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestUseItemBox;
			summary.rmiName = RmiName_RequestUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestUseItemBox (remote,ctx , sendHostID, itemBoxIndex );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestUseItemBox);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestUseItemBox;
			summary.rmiName = RmiName_RequestUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterStartSetup:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterStartSetup);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=shelterID.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterStartSetup, RmiName_RequestShelterStartSetup,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterStartSetup;
			summary.rmiName = RmiName_RequestShelterStartSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterStartSetup (remote,ctx , shelterID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterStartSetup);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterStartSetup;
			summary.rmiName = RmiName_RequestShelterStartSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterDoorControl:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool doorState; SP_Marshaler.Read(__msg,out doorState);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterDoorControl);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=doorState.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterDoorControl, RmiName_RequestShelterDoorControl,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterDoorControl;
			summary.rmiName = RmiName_RequestShelterDoorControl;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterDoorControl (remote,ctx , sendHostID, shelterID, doorState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterDoorControl);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterDoorControl;
			summary.rmiName = RmiName_RequestShelterDoorControl;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterEnter:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool enter; SP_Marshaler.Read(__msg,out enter);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterEnter);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=enter.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterEnter, RmiName_RequestShelterEnter,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterEnter;
			summary.rmiName = RmiName_RequestShelterEnter;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterEnter (remote,ctx , sendHostID, shelterID, enter );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterEnter);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterEnter;
			summary.rmiName = RmiName_RequestShelterEnter;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestItemDelete:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int itemID; SP_Marshaler.Read(__msg,out itemID);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemDelete);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=itemID.ToString()+",";
			NotifyCallFromStub(Common.RequestItemDelete, RmiName_RequestItemDelete,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestItemDelete;
			summary.rmiName = RmiName_RequestItemDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestItemDelete (remote,ctx , itemID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestItemDelete);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestItemDelete;
			summary.rmiName = RmiName_RequestItemDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginSuccess:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
bool host; SP_Marshaler.Read(__msg,out host);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginSuccess);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=host.ToString()+",";
			NotifyCallFromStub(Common.NotifyLoginSuccess, RmiName_NotifyLoginSuccess,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginSuccess (remote,ctx , hostID, host );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginFailed:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string reason; SP_Marshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginFailed);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=reason.ToString()+",";
			NotifyCallFromStub(Common.NotifyLoginFailed, RmiName_NotifyLoginFailed,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginFailed (remote,ctx , reason );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyOtherClientJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float x; SP_Marshaler.Read(__msg,out x);	
float y; SP_Marshaler.Read(__msg,out y);	
float z; SP_Marshaler.Read(__msg,out z);	
core.PostCheckReadMessage(__msg, RmiName_NotifyOtherClientJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
			NotifyCallFromStub(Common.NotifyOtherClientJoin, RmiName_NotifyOtherClientJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyOtherClientJoin;
			summary.rmiName = RmiName_NotifyOtherClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyOtherClientJoin (remote,ctx , hostID, name, x, y, z );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyOtherClientJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyOtherClientJoin;
			summary.rmiName = RmiName_NotifyOtherClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerLost:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerLost);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerLost, RmiName_NotifyPlayerLost,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerLost;
			summary.rmiName = RmiName_NotifyPlayerLost;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerLost (remote,ctx , hostID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerLost);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerLost;
			summary.rmiName = RmiName_NotifyPlayerLost;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float curX; SP_Marshaler.Read(__msg,out curX);	
float curY; SP_Marshaler.Read(__msg,out curY);	
float curZ; SP_Marshaler.Read(__msg,out curZ);	
float velocityX; SP_Marshaler.Read(__msg,out velocityX);	
float velocityY; SP_Marshaler.Read(__msg,out velocityY);	
float velocityZ; SP_Marshaler.Read(__msg,out velocityZ);	
float crx; SP_Marshaler.Read(__msg,out crx);	
float cry; SP_Marshaler.Read(__msg,out cry);	
float crz; SP_Marshaler.Read(__msg,out crz);	
float rx; SP_Marshaler.Read(__msg,out rx);	
float ry; SP_Marshaler.Read(__msg,out ry);	
float rz; SP_Marshaler.Read(__msg,out rz);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=curX.ToString()+",";
parameterString+=curY.ToString()+",";
parameterString+=curZ.ToString()+",";
parameterString+=velocityX.ToString()+",";
parameterString+=velocityY.ToString()+",";
parameterString+=velocityZ.ToString()+",";
parameterString+=crx.ToString()+",";
parameterString+=cry.ToString()+",";
parameterString+=crz.ToString()+",";
parameterString+=rx.ToString()+",";
parameterString+=ry.ToString()+",";
parameterString+=rz.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerMove, RmiName_NotifyPlayerMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerMove;
			summary.rmiName = RmiName_NotifyPlayerMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerMove (remote,ctx , hostID, name, curX, curY, curZ, velocityX, velocityY, velocityZ, crx, cry, crz, rx, ry, rz );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerMove;
			summary.rmiName = RmiName_NotifyPlayerMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDeleteItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string networkID; SP_Marshaler.Read(__msg,out networkID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyDeleteItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=networkID.ToString()+",";
			NotifyCallFromStub(Common.NotifyDeleteItem, RmiName_NotifyDeleteItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDeleteItem;
			summary.rmiName = RmiName_NotifyDeleteItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDeleteItem (remote,ctx , networkID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDeleteItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDeleteItem;
			summary.rmiName = RmiName_NotifyDeleteItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyCreateItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string itemID; SP_Marshaler.Read(__msg,out itemID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCreateItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyCreateItem, RmiName_NotifyCreateItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyCreateItem;
			summary.rmiName = RmiName_NotifyCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyCreateItem (remote,ctx , hostID, itemID, networkID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyCreateItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyCreateItem;
			summary.rmiName = RmiName_NotifyCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyStartOxyChargerState:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int oxyChargerID; SP_Marshaler.Read(__msg,out oxyChargerID);	
float oxy; SP_Marshaler.Read(__msg,out oxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyStartOxyChargerState);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=oxyChargerID.ToString()+",";
parameterString+=oxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyStartOxyChargerState, RmiName_NotifyStartOxyChargerState,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyStartOxyChargerState;
			summary.rmiName = RmiName_NotifyStartOxyChargerState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyStartOxyChargerState (remote,ctx , oxyChargerID, oxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyStartOxyChargerState);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyStartOxyChargerState;
			summary.rmiName = RmiName_NotifyStartOxyChargerState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyStartItemBoxState:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int itemBoxID; SP_Marshaler.Read(__msg,out itemBoxID);	
bool openState; SP_Marshaler.Read(__msg,out openState);	
core.PostCheckReadMessage(__msg, RmiName_NotifyStartItemBoxState);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=itemBoxID.ToString()+",";
parameterString+=openState.ToString()+",";
			NotifyCallFromStub(Common.NotifyStartItemBoxState, RmiName_NotifyStartItemBoxState,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyStartItemBoxState;
			summary.rmiName = RmiName_NotifyStartItemBoxState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyStartItemBoxState (remote,ctx , itemBoxID, openState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyStartItemBoxState);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyStartItemBoxState;
			summary.rmiName = RmiName_NotifyStartItemBoxState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerEquipItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string itemID; SP_Marshaler.Read(__msg,out itemID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerEquipItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=networkID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerEquipItem, RmiName_NotifyPlayerEquipItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerEquipItem;
			summary.rmiName = RmiName_NotifyPlayerEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerEquipItem (remote,ctx , hostID, itemID, networkID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerEquipItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerEquipItem;
			summary.rmiName = RmiName_NotifyPlayerEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerUnEquipItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string itemID; SP_Marshaler.Read(__msg,out itemID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerUnEquipItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerUnEquipItem, RmiName_NotifyPlayerUnEquipItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerUnEquipItem;
			summary.rmiName = RmiName_NotifyPlayerUnEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerUnEquipItem (remote,ctx , hostID, itemID, networkID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerUnEquipItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerUnEquipItem;
			summary.rmiName = RmiName_NotifyPlayerUnEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
string weaponID; SP_Marshaler.Read(__msg,out weaponID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletID.ToString()+",";
parameterString+=weaponID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletCreate, RmiName_NotifyPlayerBulletCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletCreate;
			summary.rmiName = RmiName_NotifyPlayerBulletCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletCreate (remote,ctx , sendHostID, bulletID, weaponID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletCreate;
			summary.rmiName = RmiName_NotifyPlayerBulletCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 velocity; SP_Marshaler.Read(__msg,out velocity);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=velocity.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletMove, RmiName_NotifyPlayerBulletMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletMove;
			summary.rmiName = RmiName_NotifyPlayerBulletMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletMove (remote,ctx , sendHostID, bulletID, pos, velocity, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletMove;
			summary.rmiName = RmiName_NotifyPlayerBulletMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletDelete:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletDelete);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletDelete, RmiName_NotifyPlayerBulletDelete,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletDelete;
			summary.rmiName = RmiName_NotifyPlayerBulletDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletDelete (remote,ctx , sendHostID, bulletID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletDelete);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletDelete;
			summary.rmiName = RmiName_NotifyPlayerBulletDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerAnimation:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
string animationName; SP_Marshaler.Read(__msg,out animationName);	
int aniValue; SP_Marshaler.Read(__msg,out aniValue);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerAnimation);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=animationName.ToString()+",";
parameterString+=aniValue.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerAnimation, RmiName_NotifyPlayerAnimation,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerAnimation;
			summary.rmiName = RmiName_NotifyPlayerAnimation;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerAnimation (remote,ctx , hostID, name, animationName, aniValue );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerAnimation);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerAnimation;
			summary.rmiName = RmiName_NotifyPlayerAnimation;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerChangeHP:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float hp; SP_Marshaler.Read(__msg,out hp);	
float prevhp; SP_Marshaler.Read(__msg,out prevhp);	
float maxhp; SP_Marshaler.Read(__msg,out maxhp);	
UnityEngine.Vector3 dir; SP_Marshaler.Read(__msg,out dir);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerChangeHP);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=hp.ToString()+",";
parameterString+=prevhp.ToString()+",";
parameterString+=maxhp.ToString()+",";
parameterString+=dir.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerChangeHP, RmiName_NotifyPlayerChangeHP,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeHP;
			summary.rmiName = RmiName_NotifyPlayerChangeHP;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerChangeHP (remote,ctx , sendHostID, name, hp, prevhp, maxhp, dir );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeHP);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeHP;
			summary.rmiName = RmiName_NotifyPlayerChangeHP;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerChangeOxygen:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float oxygen; SP_Marshaler.Read(__msg,out oxygen);	
float prevoxy; SP_Marshaler.Read(__msg,out prevoxy);	
float maxoxy; SP_Marshaler.Read(__msg,out maxoxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerChangeOxygen);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=oxygen.ToString()+",";
parameterString+=prevoxy.ToString()+",";
parameterString+=maxoxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerChangeOxygen, RmiName_NotifyPlayerChangeOxygen,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeOxygen;
			summary.rmiName = RmiName_NotifyPlayerChangeOxygen;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerChangeOxygen (remote,ctx , sendHostID, name, oxygen, prevoxy, maxoxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeOxygen);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeOxygen;
			summary.rmiName = RmiName_NotifyPlayerChangeOxygen;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyUseOxyCharger:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int oxyChargerIndex; SP_Marshaler.Read(__msg,out oxyChargerIndex);	
float userOxy; SP_Marshaler.Read(__msg,out userOxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyUseOxyCharger);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=oxyChargerIndex.ToString()+",";
parameterString+=userOxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyUseOxyCharger, RmiName_NotifyUseOxyCharger,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyUseOxyCharger;
			summary.rmiName = RmiName_NotifyUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyUseOxyCharger);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyUseOxyCharger;
			summary.rmiName = RmiName_NotifyUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyUseItemBox:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int itemBoxIndex; SP_Marshaler.Read(__msg,out itemBoxIndex);	
string itemID; SP_Marshaler.Read(__msg,out itemID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyUseItemBox);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=itemBoxIndex.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=networkID.ToString()+",";
			NotifyCallFromStub(Common.NotifyUseItemBox, RmiName_NotifyUseItemBox,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyUseItemBox;
			summary.rmiName = RmiName_NotifyUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyUseItemBox (remote,ctx , sendHostID, itemBoxIndex, itemID, networkID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyUseItemBox);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyUseItemBox;
			summary.rmiName = RmiName_NotifyUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyShelterInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool doorState; SP_Marshaler.Read(__msg,out doorState);	
bool lightState; SP_Marshaler.Read(__msg,out lightState);	
core.PostCheckReadMessage(__msg, RmiName_NotifyShelterInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=doorState.ToString()+",";
parameterString+=lightState.ToString()+",";
			NotifyCallFromStub(Common.NotifyShelterInfo, RmiName_NotifyShelterInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyShelterInfo;
			summary.rmiName = RmiName_NotifyShelterInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyShelterInfo (remote,ctx , sendHostID, shelterID, doorState, lightState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyShelterInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyShelterInfo;
			summary.rmiName = RmiName_NotifyShelterInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyMeteorCreateTime:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int time; SP_Marshaler.Read(__msg,out time);	
core.PostCheckReadMessage(__msg, RmiName_NotifyMeteorCreateTime);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=time.ToString()+",";
			NotifyCallFromStub(Common.NotifyMeteorCreateTime, RmiName_NotifyMeteorCreateTime,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreateTime;
			summary.rmiName = RmiName_NotifyMeteorCreateTime;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyMeteorCreateTime (remote,ctx , time );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreateTime);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreateTime;
			summary.rmiName = RmiName_NotifyMeteorCreateTime;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyMeteorCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float anglex; SP_Marshaler.Read(__msg,out anglex);	
float anglez; SP_Marshaler.Read(__msg,out anglez);	
core.PostCheckReadMessage(__msg, RmiName_NotifyMeteorCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=anglex.ToString()+",";
parameterString+=anglez.ToString()+",";
			NotifyCallFromStub(Common.NotifyMeteorCreate, RmiName_NotifyMeteorCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreate;
			summary.rmiName = RmiName_NotifyMeteorCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyMeteorCreate (remote,ctx , anglex, anglez );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreate;
			summary.rmiName = RmiName_NotifyMeteorCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifySpaceShipEngineCharge:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int spaceShipID; SP_Marshaler.Read(__msg,out spaceShipID);	
float fuel; SP_Marshaler.Read(__msg,out fuel);	
core.PostCheckReadMessage(__msg, RmiName_NotifySpaceShipEngineCharge);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=spaceShipID.ToString()+",";
parameterString+=fuel.ToString()+",";
			NotifyCallFromStub(Common.NotifySpaceShipEngineCharge, RmiName_NotifySpaceShipEngineCharge,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifySpaceShipEngineCharge;
			summary.rmiName = RmiName_NotifySpaceShipEngineCharge;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifySpaceShipEngineCharge (remote,ctx , spaceShipID, fuel );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifySpaceShipEngineCharge);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifySpaceShipEngineCharge;
			summary.rmiName = RmiName_NotifySpaceShipEngineCharge;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGrenadeCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGrenadeCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=pos.ToString()+",";
			NotifyCallFromStub(Common.NotifyGrenadeCreate, RmiName_NotifyGrenadeCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGrenadeCreate;
			summary.rmiName = RmiName_NotifyGrenadeCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGrenadeCreate (remote,ctx , sendHostID, networkID, pos );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGrenadeCreate;
			summary.rmiName = RmiName_NotifyGrenadeCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGrenadeMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 velocity; SP_Marshaler.Read(__msg,out velocity);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGrenadeMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=velocity.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyGrenadeMove, RmiName_NotifyGrenadeMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGrenadeMove;
			summary.rmiName = RmiName_NotifyGrenadeMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGrenadeMove (remote,ctx , sendHostID, networkID, pos, velocity, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGrenadeMove;
			summary.rmiName = RmiName_NotifyGrenadeMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGrenadeBoom:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string networkID; SP_Marshaler.Read(__msg,out networkID);	
bool isStone; SP_Marshaler.Read(__msg,out isStone);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGrenadeBoom);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=networkID.ToString()+",";
parameterString+=isStone.ToString()+",";
			NotifyCallFromStub(Common.NotifyGrenadeBoom, RmiName_NotifyGrenadeBoom,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGrenadeBoom;
			summary.rmiName = RmiName_NotifyGrenadeBoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGrenadeBoom (remote,ctx , sendHostID, networkID, isStone );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeBoom);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGrenadeBoom;
			summary.rmiName = RmiName_NotifyGrenadeBoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGrenadeRemove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string networkID; SP_Marshaler.Read(__msg,out networkID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGrenadeRemove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=networkID.ToString()+",";
			NotifyCallFromStub(Common.NotifyGrenadeRemove, RmiName_NotifyGrenadeRemove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGrenadeRemove;
			summary.rmiName = RmiName_NotifyGrenadeRemove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGrenadeRemove (remote,ctx , networkID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGrenadeRemove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGrenadeRemove;
			summary.rmiName = RmiName_NotifyGrenadeRemove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestHpUpdate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float hp; SP_Marshaler.Read(__msg,out hp);	
core.PostCheckReadMessage(__msg, RmiName_RequestHpUpdate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hp.ToString()+",";
			NotifyCallFromStub(Common.RequestHpUpdate, RmiName_RequestHpUpdate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestHpUpdate;
			summary.rmiName = RmiName_RequestHpUpdate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestHpUpdate (remote,ctx , hp );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestHpUpdate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestHpUpdate;
			summary.rmiName = RmiName_RequestHpUpdate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDrawGame:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyDrawGame);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyDrawGame, RmiName_NotifyDrawGame,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDrawGame;
			summary.rmiName = RmiName_NotifyDrawGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDrawGame (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDrawGame);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDrawGame;
			summary.rmiName = RmiName_NotifyDrawGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestDrawGameResult:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestDrawGameResult);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestDrawGameResult, RmiName_RequestDrawGameResult,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestDrawGameResult;
			summary.rmiName = RmiName_RequestDrawGameResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestDrawGameResult (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestDrawGameResult);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestDrawGameResult;
			summary.rmiName = RmiName_RequestDrawGameResult;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestSpaceShip:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int winPlayerID; SP_Marshaler.Read(__msg,out winPlayerID);	
core.PostCheckReadMessage(__msg, RmiName_RequestSpaceShip);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=winPlayerID.ToString()+",";
			NotifyCallFromStub(Common.RequestSpaceShip, RmiName_RequestSpaceShip,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestSpaceShip;
			summary.rmiName = RmiName_RequestSpaceShip;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestSpaceShip (remote,ctx , winPlayerID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestSpaceShip);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestSpaceShip;
			summary.rmiName = RmiName_RequestSpaceShip;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestGameEnd:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestGameEnd);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestGameEnd, RmiName_RequestGameEnd,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestGameEnd;
			summary.rmiName = RmiName_RequestGameEnd;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestGameEnd (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestGameEnd);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestGameEnd;
			summary.rmiName = RmiName_RequestGameEnd;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyKillInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string targetName; SP_Marshaler.Read(__msg,out targetName);	
bool kill; SP_Marshaler.Read(__msg,out kill);	
int totalKill; SP_Marshaler.Read(__msg,out totalKill);	
int totalAssist; SP_Marshaler.Read(__msg,out totalAssist);	
core.PostCheckReadMessage(__msg, RmiName_NotifyKillInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=targetName.ToString()+",";
parameterString+=kill.ToString()+",";
parameterString+=totalKill.ToString()+",";
parameterString+=totalAssist.ToString()+",";
			NotifyCallFromStub(Common.NotifyKillInfo, RmiName_NotifyKillInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyKillInfo;
			summary.rmiName = RmiName_NotifyKillInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyKillInfo (remote,ctx , targetName, kill, totalKill, totalAssist );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyKillInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyKillInfo;
			summary.rmiName = RmiName_NotifyKillInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultInfoMe:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string gameMode; SP_Marshaler.Read(__msg,out gameMode);	
int winState; SP_Marshaler.Read(__msg,out winState);	
int playTime; SP_Marshaler.Read(__msg,out playTime);	
int kills; SP_Marshaler.Read(__msg,out kills);	
int assists; SP_Marshaler.Read(__msg,out assists);	
int death; SP_Marshaler.Read(__msg,out death);	
int getMoney; SP_Marshaler.Read(__msg,out getMoney);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultInfoMe);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=gameMode.ToString()+",";
parameterString+=winState.ToString()+",";
parameterString+=playTime.ToString()+",";
parameterString+=kills.ToString()+",";
parameterString+=assists.ToString()+",";
parameterString+=death.ToString()+",";
parameterString+=getMoney.ToString()+",";
			NotifyCallFromStub(Common.NotifyGameResultInfoMe, RmiName_NotifyGameResultInfoMe,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoMe;
			summary.rmiName = RmiName_NotifyGameResultInfoMe;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultInfoMe (remote,ctx , gameMode, winState, playTime, kills, assists, death, getMoney );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoMe);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoMe;
			summary.rmiName = RmiName_NotifyGameResultInfoMe;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultInfoOther:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string name; SP_Marshaler.Read(__msg,out name);	
int state; SP_Marshaler.Read(__msg,out state);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultInfoOther);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=name.ToString()+",";
parameterString+=state.ToString()+",";
			NotifyCallFromStub(Common.NotifyGameResultInfoOther, RmiName_NotifyGameResultInfoOther,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoOther;
			summary.rmiName = RmiName_NotifyGameResultInfoOther;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultInfoOther (remote,ctx , name, state );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoOther);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoOther;
			summary.rmiName = RmiName_NotifyGameResultInfoOther;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultShow:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultShow);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyGameResultShow, RmiName_NotifyGameResultShow,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultShow;
			summary.rmiName = RmiName_NotifyGameResultShow;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultShow (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultShow);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultShow;
			summary.rmiName = RmiName_NotifyGameResultShow;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestSpaceShipSetup:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int spaceShipCount; SP_Marshaler.Read(__msg,out spaceShipCount);	
core.PostCheckReadMessage(__msg, RmiName_RequestSpaceShipSetup);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=spaceShipCount.ToString()+",";
			NotifyCallFromStub(Common.RequestSpaceShipSetup, RmiName_RequestSpaceShipSetup,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestSpaceShipSetup;
			summary.rmiName = RmiName_RequestSpaceShipSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestSpaceShipSetup (remote,ctx , spaceShipCount );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestSpaceShipSetup);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestSpaceShipSetup;
			summary.rmiName = RmiName_RequestSpaceShipSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDeathZoneCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int spaceShipIndex; SP_Marshaler.Read(__msg,out spaceShipIndex);	
core.PostCheckReadMessage(__msg, RmiName_NotifyDeathZoneCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=spaceShipIndex.ToString()+",";
			NotifyCallFromStub(Common.NotifyDeathZoneCreate, RmiName_NotifyDeathZoneCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneCreate;
			summary.rmiName = RmiName_NotifyDeathZoneCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDeathZoneCreate (remote,ctx , spaceShipIndex );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneCreate;
			summary.rmiName = RmiName_NotifyDeathZoneCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestDeathZoneMoveIndex:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int moveIndex; SP_Marshaler.Read(__msg,out moveIndex);	
core.PostCheckReadMessage(__msg, RmiName_RequestDeathZoneMoveIndex);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=moveIndex.ToString()+",";
			NotifyCallFromStub(Common.RequestDeathZoneMoveIndex, RmiName_RequestDeathZoneMoveIndex,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestDeathZoneMoveIndex;
			summary.rmiName = RmiName_RequestDeathZoneMoveIndex;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestDeathZoneMoveIndex (remote,ctx , moveIndex );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestDeathZoneMoveIndex);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestDeathZoneMoveIndex;
			summary.rmiName = RmiName_RequestDeathZoneMoveIndex;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDeathZoneMoveHostAndIndexSetup:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int moveHostID; SP_Marshaler.Read(__msg,out moveHostID);	
int currentIndex; SP_Marshaler.Read(__msg,out currentIndex);	
core.PostCheckReadMessage(__msg, RmiName_NotifyDeathZoneMoveHostAndIndexSetup);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=moveHostID.ToString()+",";
parameterString+=currentIndex.ToString()+",";
			NotifyCallFromStub(Common.NotifyDeathZoneMoveHostAndIndexSetup, RmiName_NotifyDeathZoneMoveHostAndIndexSetup,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneMoveHostAndIndexSetup;
			summary.rmiName = RmiName_NotifyDeathZoneMoveHostAndIndexSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDeathZoneMoveHostAndIndexSetup (remote,ctx , moveHostID, currentIndex );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneMoveHostAndIndexSetup);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneMoveHostAndIndexSetup;
			summary.rmiName = RmiName_NotifyDeathZoneMoveHostAndIndexSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDeathZoneMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 velocity; SP_Marshaler.Read(__msg,out velocity);	
core.PostCheckReadMessage(__msg, RmiName_NotifyDeathZoneMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=pos.ToString()+",";
parameterString+=velocity.ToString()+",";
			NotifyCallFromStub(Common.NotifyDeathZoneMove, RmiName_NotifyDeathZoneMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneMove;
			summary.rmiName = RmiName_NotifyDeathZoneMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDeathZoneMove (remote,ctx , pos, velocity );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDeathZoneMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDeathZoneMove;
			summary.rmiName = RmiName_NotifyDeathZoneMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestGameExit="RequestGameExit";
const string RmiName_RequestServerConnect="RequestServerConnect";
const string RmiName_RequestLobbyConnect="RequestLobbyConnect";
const string RmiName_RequestNetworkGameTeamSelect="RequestNetworkGameTeamSelect";
const string RmiName_RequestNetworkGameReady="RequestNetworkGameReady";
const string RmiName_RequestNetworkChangeMap="RequestNetworkChangeMap";
const string RmiName_RequestNetworkPlayerCount="RequestNetworkPlayerCount";
const string RmiName_RequestNetworkGameModeChange="RequestNetworkGameModeChange";
const string RmiName_RequestNetworkGameStart="RequestNetworkGameStart";
const string RmiName_RequestNetworkHostOut="RequestNetworkHostOut";
const string RmiName_RequestGameSceneJoin="RequestGameSceneJoin";
const string RmiName_NotifyNetworkUserSetup="NotifyNetworkUserSetup";
const string RmiName_NotifyNetworkGameTeamChange="NotifyNetworkGameTeamChange";
const string RmiName_NotifyNetworkConnectUser="NotifyNetworkConnectUser";
const string RmiName_NotifyNetworkReady="NotifyNetworkReady";
const string RmiName_NotifyNetworkGameModeChange="NotifyNetworkGameModeChange";
const string RmiName_NotifyNetworkGamePlayerCountChange="NotifyNetworkGamePlayerCountChange";
const string RmiName_NotifyNetworkGameChangeMap="NotifyNetworkGameChangeMap";
const string RmiName_NotifyNetworkGameStart="NotifyNetworkGameStart";
const string RmiName_NotifyNetworkGameStartFailed="NotifyNetworkGameStartFailed";
const string RmiName_NotifyNetworkGameHostOut="NotifyNetworkGameHostOut";
const string RmiName_RequestClientJoin="RequestClientJoin";
const string RmiName_RequestWorldCreateItem="RequestWorldCreateItem";
const string RmiName_RequestPlayerDamage="RequestPlayerDamage";
const string RmiName_RequestPlayerUseOxy="RequestPlayerUseOxy";
const string RmiName_RequestUseOxyCharger="RequestUseOxyCharger";
const string RmiName_RequestUseItemBox="RequestUseItemBox";
const string RmiName_RequestShelterStartSetup="RequestShelterStartSetup";
const string RmiName_RequestShelterDoorControl="RequestShelterDoorControl";
const string RmiName_RequestShelterEnter="RequestShelterEnter";
const string RmiName_RequestItemDelete="RequestItemDelete";
const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
const string RmiName_NotifyOtherClientJoin="NotifyOtherClientJoin";
const string RmiName_NotifyPlayerLost="NotifyPlayerLost";
const string RmiName_NotifyPlayerMove="NotifyPlayerMove";
const string RmiName_NotifyDeleteItem="NotifyDeleteItem";
const string RmiName_NotifyCreateItem="NotifyCreateItem";
const string RmiName_NotifyStartOxyChargerState="NotifyStartOxyChargerState";
const string RmiName_NotifyStartItemBoxState="NotifyStartItemBoxState";
const string RmiName_NotifyPlayerEquipItem="NotifyPlayerEquipItem";
const string RmiName_NotifyPlayerUnEquipItem="NotifyPlayerUnEquipItem";
const string RmiName_NotifyPlayerBulletCreate="NotifyPlayerBulletCreate";
const string RmiName_NotifyPlayerBulletMove="NotifyPlayerBulletMove";
const string RmiName_NotifyPlayerBulletDelete="NotifyPlayerBulletDelete";
const string RmiName_NotifyPlayerAnimation="NotifyPlayerAnimation";
const string RmiName_NotifyPlayerChangeHP="NotifyPlayerChangeHP";
const string RmiName_NotifyPlayerChangeOxygen="NotifyPlayerChangeOxygen";
const string RmiName_NotifyUseOxyCharger="NotifyUseOxyCharger";
const string RmiName_NotifyUseItemBox="NotifyUseItemBox";
const string RmiName_NotifyShelterInfo="NotifyShelterInfo";
const string RmiName_NotifyMeteorCreateTime="NotifyMeteorCreateTime";
const string RmiName_NotifyMeteorCreate="NotifyMeteorCreate";
const string RmiName_NotifySpaceShipEngineCharge="NotifySpaceShipEngineCharge";
const string RmiName_NotifyGrenadeCreate="NotifyGrenadeCreate";
const string RmiName_NotifyGrenadeMove="NotifyGrenadeMove";
const string RmiName_NotifyGrenadeBoom="NotifyGrenadeBoom";
const string RmiName_NotifyGrenadeRemove="NotifyGrenadeRemove";
const string RmiName_RequestHpUpdate="RequestHpUpdate";
const string RmiName_NotifyDrawGame="NotifyDrawGame";
const string RmiName_RequestDrawGameResult="RequestDrawGameResult";
const string RmiName_RequestSpaceShip="RequestSpaceShip";
const string RmiName_RequestGameEnd="RequestGameEnd";
const string RmiName_NotifyKillInfo="NotifyKillInfo";
const string RmiName_NotifyGameResultInfoMe="NotifyGameResultInfoMe";
const string RmiName_NotifyGameResultInfoOther="NotifyGameResultInfoOther";
const string RmiName_NotifyGameResultShow="NotifyGameResultShow";
const string RmiName_RequestSpaceShipSetup="RequestSpaceShipSetup";
const string RmiName_NotifyDeathZoneCreate="NotifyDeathZoneCreate";
const string RmiName_RequestDeathZoneMoveIndex="RequestDeathZoneMoveIndex";
const string RmiName_NotifyDeathZoneMoveHostAndIndexSetup="NotifyDeathZoneMoveHostAndIndexSetup";
const string RmiName_NotifyDeathZoneMove="NotifyDeathZoneMove";
       
const string RmiName_First = RmiName_RequestGameExit;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestGameExit="";
const string RmiName_RequestServerConnect="";
const string RmiName_RequestLobbyConnect="";
const string RmiName_RequestNetworkGameTeamSelect="";
const string RmiName_RequestNetworkGameReady="";
const string RmiName_RequestNetworkChangeMap="";
const string RmiName_RequestNetworkPlayerCount="";
const string RmiName_RequestNetworkGameModeChange="";
const string RmiName_RequestNetworkGameStart="";
const string RmiName_RequestNetworkHostOut="";
const string RmiName_RequestGameSceneJoin="";
const string RmiName_NotifyNetworkUserSetup="";
const string RmiName_NotifyNetworkGameTeamChange="";
const string RmiName_NotifyNetworkConnectUser="";
const string RmiName_NotifyNetworkReady="";
const string RmiName_NotifyNetworkGameModeChange="";
const string RmiName_NotifyNetworkGamePlayerCountChange="";
const string RmiName_NotifyNetworkGameChangeMap="";
const string RmiName_NotifyNetworkGameStart="";
const string RmiName_NotifyNetworkGameStartFailed="";
const string RmiName_NotifyNetworkGameHostOut="";
const string RmiName_RequestClientJoin="";
const string RmiName_RequestWorldCreateItem="";
const string RmiName_RequestPlayerDamage="";
const string RmiName_RequestPlayerUseOxy="";
const string RmiName_RequestUseOxyCharger="";
const string RmiName_RequestUseItemBox="";
const string RmiName_RequestShelterStartSetup="";
const string RmiName_RequestShelterDoorControl="";
const string RmiName_RequestShelterEnter="";
const string RmiName_RequestItemDelete="";
const string RmiName_NotifyLoginSuccess="";
const string RmiName_NotifyLoginFailed="";
const string RmiName_NotifyOtherClientJoin="";
const string RmiName_NotifyPlayerLost="";
const string RmiName_NotifyPlayerMove="";
const string RmiName_NotifyDeleteItem="";
const string RmiName_NotifyCreateItem="";
const string RmiName_NotifyStartOxyChargerState="";
const string RmiName_NotifyStartItemBoxState="";
const string RmiName_NotifyPlayerEquipItem="";
const string RmiName_NotifyPlayerUnEquipItem="";
const string RmiName_NotifyPlayerBulletCreate="";
const string RmiName_NotifyPlayerBulletMove="";
const string RmiName_NotifyPlayerBulletDelete="";
const string RmiName_NotifyPlayerAnimation="";
const string RmiName_NotifyPlayerChangeHP="";
const string RmiName_NotifyPlayerChangeOxygen="";
const string RmiName_NotifyUseOxyCharger="";
const string RmiName_NotifyUseItemBox="";
const string RmiName_NotifyShelterInfo="";
const string RmiName_NotifyMeteorCreateTime="";
const string RmiName_NotifyMeteorCreate="";
const string RmiName_NotifySpaceShipEngineCharge="";
const string RmiName_NotifyGrenadeCreate="";
const string RmiName_NotifyGrenadeMove="";
const string RmiName_NotifyGrenadeBoom="";
const string RmiName_NotifyGrenadeRemove="";
const string RmiName_RequestHpUpdate="";
const string RmiName_NotifyDrawGame="";
const string RmiName_RequestDrawGameResult="";
const string RmiName_RequestSpaceShip="";
const string RmiName_RequestGameEnd="";
const string RmiName_NotifyKillInfo="";
const string RmiName_NotifyGameResultInfoMe="";
const string RmiName_NotifyGameResultInfoOther="";
const string RmiName_NotifyGameResultShow="";
const string RmiName_RequestSpaceShipSetup="";
const string RmiName_NotifyDeathZoneCreate="";
const string RmiName_RequestDeathZoneMoveIndex="";
const string RmiName_NotifyDeathZoneMoveHostAndIndexSetup="";
const string RmiName_NotifyDeathZoneMove="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

