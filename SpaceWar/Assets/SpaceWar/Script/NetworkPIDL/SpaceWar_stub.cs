




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

            
using Nettention.Proud; 
namespace SpaceWar
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestServerConnectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id);  
		public RequestServerConnectDelegate RequestServerConnect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id)
		{ 
			return false;
		};
		public delegate bool RequestClientJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z);  
		public RequestClientJoinDelegate RequestClientJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z)
		{ 
			return false;
		};
		public delegate bool RequestWorldCreateItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public RequestWorldCreateItemDelegate RequestWorldCreateItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool RequestPlayerDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int targetHostID, string name, string weaponName, float damage);  
		public RequestPlayerDamageDelegate RequestPlayerDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int targetHostID, string name, string weaponName, float damage)
		{ 
			return false;
		};
		public delegate bool RequestPlayerUseOxyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float useOxy);  
		public RequestPlayerUseOxyDelegate RequestPlayerUseOxy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float useOxy)
		{ 
			return false;
		};
		public delegate bool RequestUseOxyChargerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy);  
		public RequestUseOxyChargerDelegate RequestUseOxyCharger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy)
		{ 
			return false;
		};
		public delegate bool RequestUseItemBoxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex);  
		public RequestUseItemBoxDelegate RequestUseItemBox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex)
		{ 
			return false;
		};
		public delegate bool RequestShelterStartSetupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shelterID);  
		public RequestShelterStartSetupDelegate RequestShelterStartSetup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shelterID)
		{ 
			return false;
		};
		public delegate bool RequestShelterDoorControlDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState);  
		public RequestShelterDoorControlDelegate RequestShelterDoorControl = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState)
		{ 
			return false;
		};
		public delegate bool RequestShelterEnterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool enter);  
		public RequestShelterEnterDelegate RequestShelterEnter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool enter)
		{ 
			return false;
		};
		public delegate bool NotifyLoginSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID);  
		public NotifyLoginSuccessDelegate NotifyLoginSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID)
		{ 
			return false;
		};
		public delegate bool NotifyLoginFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string reason);  
		public NotifyLoginFailedDelegate NotifyLoginFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string reason)
		{ 
			return false;
		};
		public delegate bool NotifyOtherClientJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z);  
		public NotifyOtherClientJoinDelegate NotifyOtherClientJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float x, float y, float z)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerLostDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID);  
		public NotifyPlayerLostDelegate NotifyPlayerLost = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float curX, float curY, float curZ, float velocityX, float velocityY, float velocityZ, float crx, float cry, float crz, float rx, float ry, float rz);  
		public NotifyPlayerMoveDelegate NotifyPlayerMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, float curX, float curY, float curZ, float velocityX, float velocityY, float velocityZ, float crx, float cry, float crz, float rx, float ry, float rz)
		{ 
			return false;
		};
		public delegate bool NotifyDeleteItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemID);  
		public NotifyDeleteItemDelegate NotifyDeleteItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemID)
		{ 
			return false;
		};
		public delegate bool NotifyCreateItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyCreateItemDelegate NotifyCreateItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyStartOxyChargerStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int oxyChargerID, float oxy);  
		public NotifyStartOxyChargerStateDelegate NotifyStartOxyChargerState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int oxyChargerID, float oxy)
		{ 
			return false;
		};
		public delegate bool NotifyStartItemBoxStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemBoxID, bool openState);  
		public NotifyStartItemBoxStateDelegate NotifyStartItemBoxState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemBoxID, bool openState)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerEquipItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID);  
		public NotifyPlayerEquipItemDelegate NotifyPlayerEquipItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerUnEquipItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyPlayerUnEquipItemDelegate NotifyPlayerUnEquipItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, int itemCID, int itemID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletType, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);  
		public NotifyPlayerBulletCreateDelegate NotifyPlayerBulletCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletType, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot);  
		public NotifyPlayerBulletMoveDelegate NotifyPlayerBulletMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID, UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, UnityEngine.Vector3 rot)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerBulletDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID);  
		public NotifyPlayerBulletDeleteDelegate NotifyPlayerBulletDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string bulletID)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerAnimationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, string animationName, int aniValue);  
		public NotifyPlayerAnimationDelegate NotifyPlayerAnimation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, string name, string animationName, int aniValue)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerChangeHPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float hp, float prevhp, float maxhp);  
		public NotifyPlayerChangeHPDelegate NotifyPlayerChangeHP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float hp, float prevhp, float maxhp)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerChangeOxygenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float oxygen, float prevoxy, float maxoxy);  
		public NotifyPlayerChangeOxygenDelegate NotifyPlayerChangeOxygen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, string name, float oxygen, float prevoxy, float maxoxy)
		{ 
			return false;
		};
		public delegate bool NotifyUseOxyChargerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy);  
		public NotifyUseOxyChargerDelegate NotifyUseOxyCharger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int oxyChargerIndex, float userOxy)
		{ 
			return false;
		};
		public delegate bool NotifyUseItemBoxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex, int itemID);  
		public NotifyUseItemBoxDelegate NotifyUseItemBox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int itemBoxIndex, int itemID)
		{ 
			return false;
		};
		public delegate bool NotifyShelterInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState, bool lightState);  
		public NotifyShelterInfoDelegate NotifyShelterInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int sendHostID, int shelterID, bool doorState, bool lightState)
		{ 
			return false;
		};
		public delegate bool NotifyMeteorCreateTimeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time);  
		public NotifyMeteorCreateTimeDelegate NotifyMeteorCreateTime = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int time)
		{ 
			return false;
		};
		public delegate bool NotifyMeteorCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float anglex, float anglez);  
		public NotifyMeteorCreateDelegate NotifyMeteorCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float anglex, float anglez)
		{ 
			return false;
		};
		public delegate bool NotifySpaceShipEngineChargeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipID, float fuel);  
		public NotifySpaceShipEngineChargeDelegate NotifySpaceShipEngineCharge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int spaceShipID, float fuel)
		{ 
			return false;
		};
		public delegate bool RequestGameEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int winPlayerID);  
		public RequestGameEndDelegate RequestGameEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int winPlayerID)
		{ 
			return false;
		};
		public delegate bool NotifyKillInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName, bool kill, int totalKill, int totalAssist);  
		public NotifyKillInfoDelegate NotifyKillInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName, bool kill, int totalKill, int totalAssist)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultInfoMeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string gameMode, int winState, int playTime, int kills, int assists, int death, int getMoney);  
		public NotifyGameResultInfoMeDelegate NotifyGameResultInfoMe = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string gameMode, int winState, int playTime, int kills, int assists, int death, int getMoney)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultInfoOtherDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int state);  
		public NotifyGameResultInfoOtherDelegate NotifyGameResultInfoOther = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int state)
		{ 
			return false;
		};
		public delegate bool NotifyGameResultShowDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyGameResultShowDelegate NotifyGameResultShow = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.RequestServerConnect:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string id; SP_Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestServerConnect);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=id.ToString()+",";
			NotifyCallFromStub(Common.RequestServerConnect, RmiName_RequestServerConnect,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestServerConnect;
			summary.rmiName = RmiName_RequestServerConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestServerConnect (remote,ctx , id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestServerConnect);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestServerConnect;
			summary.rmiName = RmiName_RequestServerConnect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestClientJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float x; SP_Marshaler.Read(__msg,out x);	
float y; SP_Marshaler.Read(__msg,out y);	
float z; SP_Marshaler.Read(__msg,out z);	
core.PostCheckReadMessage(__msg, RmiName_RequestClientJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
			NotifyCallFromStub(Common.RequestClientJoin, RmiName_RequestClientJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestClientJoin;
			summary.rmiName = RmiName_RequestClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestClientJoin (remote,ctx , hostID, name, x, y, z );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestClientJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestClientJoin;
			summary.rmiName = RmiName_RequestClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestWorldCreateItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
int itemCID; SP_Marshaler.Read(__msg,out itemCID);	
int itemID; SP_Marshaler.Read(__msg,out itemID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_RequestWorldCreateItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemCID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.RequestWorldCreateItem, RmiName_RequestWorldCreateItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestWorldCreateItem;
			summary.rmiName = RmiName_RequestWorldCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestWorldCreateItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestWorldCreateItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestWorldCreateItem;
			summary.rmiName = RmiName_RequestWorldCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestPlayerDamage:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int targetHostID; SP_Marshaler.Read(__msg,out targetHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
string weaponName; SP_Marshaler.Read(__msg,out weaponName);	
float damage; SP_Marshaler.Read(__msg,out damage);	
core.PostCheckReadMessage(__msg, RmiName_RequestPlayerDamage);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=targetHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=weaponName.ToString()+",";
parameterString+=damage.ToString()+",";
			NotifyCallFromStub(Common.RequestPlayerDamage, RmiName_RequestPlayerDamage,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestPlayerDamage;
			summary.rmiName = RmiName_RequestPlayerDamage;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestPlayerDamage (remote,ctx , sendHostID, targetHostID, name, weaponName, damage );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestPlayerDamage);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestPlayerDamage;
			summary.rmiName = RmiName_RequestPlayerDamage;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestPlayerUseOxy:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float useOxy; SP_Marshaler.Read(__msg,out useOxy);	
core.PostCheckReadMessage(__msg, RmiName_RequestPlayerUseOxy);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=useOxy.ToString()+",";
			NotifyCallFromStub(Common.RequestPlayerUseOxy, RmiName_RequestPlayerUseOxy,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestPlayerUseOxy;
			summary.rmiName = RmiName_RequestPlayerUseOxy;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestPlayerUseOxy (remote,ctx , sendHostID, name, useOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestPlayerUseOxy);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestPlayerUseOxy;
			summary.rmiName = RmiName_RequestPlayerUseOxy;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestUseOxyCharger:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int oxyChargerIndex; SP_Marshaler.Read(__msg,out oxyChargerIndex);	
float userOxy; SP_Marshaler.Read(__msg,out userOxy);	
core.PostCheckReadMessage(__msg, RmiName_RequestUseOxyCharger);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=oxyChargerIndex.ToString()+",";
parameterString+=userOxy.ToString()+",";
			NotifyCallFromStub(Common.RequestUseOxyCharger, RmiName_RequestUseOxyCharger,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestUseOxyCharger;
			summary.rmiName = RmiName_RequestUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestUseOxyCharger);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestUseOxyCharger;
			summary.rmiName = RmiName_RequestUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestUseItemBox:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int itemBoxIndex; SP_Marshaler.Read(__msg,out itemBoxIndex);	
core.PostCheckReadMessage(__msg, RmiName_RequestUseItemBox);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=itemBoxIndex.ToString()+",";
			NotifyCallFromStub(Common.RequestUseItemBox, RmiName_RequestUseItemBox,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestUseItemBox;
			summary.rmiName = RmiName_RequestUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestUseItemBox (remote,ctx , sendHostID, itemBoxIndex );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestUseItemBox);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestUseItemBox;
			summary.rmiName = RmiName_RequestUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterStartSetup:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterStartSetup);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=shelterID.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterStartSetup, RmiName_RequestShelterStartSetup,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterStartSetup;
			summary.rmiName = RmiName_RequestShelterStartSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterStartSetup (remote,ctx , shelterID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterStartSetup);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterStartSetup;
			summary.rmiName = RmiName_RequestShelterStartSetup;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterDoorControl:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool doorState; SP_Marshaler.Read(__msg,out doorState);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterDoorControl);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=doorState.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterDoorControl, RmiName_RequestShelterDoorControl,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterDoorControl;
			summary.rmiName = RmiName_RequestShelterDoorControl;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterDoorControl (remote,ctx , sendHostID, shelterID, doorState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterDoorControl);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterDoorControl;
			summary.rmiName = RmiName_RequestShelterDoorControl;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestShelterEnter:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool enter; SP_Marshaler.Read(__msg,out enter);	
core.PostCheckReadMessage(__msg, RmiName_RequestShelterEnter);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=enter.ToString()+",";
			NotifyCallFromStub(Common.RequestShelterEnter, RmiName_RequestShelterEnter,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestShelterEnter;
			summary.rmiName = RmiName_RequestShelterEnter;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestShelterEnter (remote,ctx , sendHostID, shelterID, enter );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestShelterEnter);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestShelterEnter;
			summary.rmiName = RmiName_RequestShelterEnter;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginSuccess:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginSuccess);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
			NotifyCallFromStub(Common.NotifyLoginSuccess, RmiName_NotifyLoginSuccess,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginSuccess (remote,ctx , hostID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginFailed:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string reason; SP_Marshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginFailed);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=reason.ToString()+",";
			NotifyCallFromStub(Common.NotifyLoginFailed, RmiName_NotifyLoginFailed,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginFailed (remote,ctx , reason );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyOtherClientJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float x; SP_Marshaler.Read(__msg,out x);	
float y; SP_Marshaler.Read(__msg,out y);	
float z; SP_Marshaler.Read(__msg,out z);	
core.PostCheckReadMessage(__msg, RmiName_NotifyOtherClientJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
			NotifyCallFromStub(Common.NotifyOtherClientJoin, RmiName_NotifyOtherClientJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyOtherClientJoin;
			summary.rmiName = RmiName_NotifyOtherClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyOtherClientJoin (remote,ctx , hostID, name, x, y, z );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyOtherClientJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyOtherClientJoin;
			summary.rmiName = RmiName_NotifyOtherClientJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerLost:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerLost);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerLost, RmiName_NotifyPlayerLost,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerLost;
			summary.rmiName = RmiName_NotifyPlayerLost;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerLost (remote,ctx , hostID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerLost);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerLost;
			summary.rmiName = RmiName_NotifyPlayerLost;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float curX; SP_Marshaler.Read(__msg,out curX);	
float curY; SP_Marshaler.Read(__msg,out curY);	
float curZ; SP_Marshaler.Read(__msg,out curZ);	
float velocityX; SP_Marshaler.Read(__msg,out velocityX);	
float velocityY; SP_Marshaler.Read(__msg,out velocityY);	
float velocityZ; SP_Marshaler.Read(__msg,out velocityZ);	
float crx; SP_Marshaler.Read(__msg,out crx);	
float cry; SP_Marshaler.Read(__msg,out cry);	
float crz; SP_Marshaler.Read(__msg,out crz);	
float rx; SP_Marshaler.Read(__msg,out rx);	
float ry; SP_Marshaler.Read(__msg,out ry);	
float rz; SP_Marshaler.Read(__msg,out rz);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=curX.ToString()+",";
parameterString+=curY.ToString()+",";
parameterString+=curZ.ToString()+",";
parameterString+=velocityX.ToString()+",";
parameterString+=velocityY.ToString()+",";
parameterString+=velocityZ.ToString()+",";
parameterString+=crx.ToString()+",";
parameterString+=cry.ToString()+",";
parameterString+=crz.ToString()+",";
parameterString+=rx.ToString()+",";
parameterString+=ry.ToString()+",";
parameterString+=rz.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerMove, RmiName_NotifyPlayerMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerMove;
			summary.rmiName = RmiName_NotifyPlayerMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerMove (remote,ctx , hostID, name, curX, curY, curZ, velocityX, velocityY, velocityZ, crx, cry, crz, rx, ry, rz );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerMove;
			summary.rmiName = RmiName_NotifyPlayerMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyDeleteItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int itemID; SP_Marshaler.Read(__msg,out itemID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyDeleteItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=itemID.ToString()+",";
			NotifyCallFromStub(Common.NotifyDeleteItem, RmiName_NotifyDeleteItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyDeleteItem;
			summary.rmiName = RmiName_NotifyDeleteItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyDeleteItem (remote,ctx , itemID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyDeleteItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyDeleteItem;
			summary.rmiName = RmiName_NotifyDeleteItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyCreateItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
int itemCID; SP_Marshaler.Read(__msg,out itemCID);	
int itemID; SP_Marshaler.Read(__msg,out itemID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCreateItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemCID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyCreateItem, RmiName_NotifyCreateItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyCreateItem;
			summary.rmiName = RmiName_NotifyCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyCreateItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyCreateItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyCreateItem;
			summary.rmiName = RmiName_NotifyCreateItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyStartOxyChargerState:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int oxyChargerID; SP_Marshaler.Read(__msg,out oxyChargerID);	
float oxy; SP_Marshaler.Read(__msg,out oxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyStartOxyChargerState);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=oxyChargerID.ToString()+",";
parameterString+=oxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyStartOxyChargerState, RmiName_NotifyStartOxyChargerState,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyStartOxyChargerState;
			summary.rmiName = RmiName_NotifyStartOxyChargerState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyStartOxyChargerState (remote,ctx , oxyChargerID, oxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyStartOxyChargerState);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyStartOxyChargerState;
			summary.rmiName = RmiName_NotifyStartOxyChargerState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyStartItemBoxState:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int itemBoxID; SP_Marshaler.Read(__msg,out itemBoxID);	
bool openState; SP_Marshaler.Read(__msg,out openState);	
core.PostCheckReadMessage(__msg, RmiName_NotifyStartItemBoxState);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=itemBoxID.ToString()+",";
parameterString+=openState.ToString()+",";
			NotifyCallFromStub(Common.NotifyStartItemBoxState, RmiName_NotifyStartItemBoxState,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyStartItemBoxState;
			summary.rmiName = RmiName_NotifyStartItemBoxState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyStartItemBoxState (remote,ctx , itemBoxID, openState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyStartItemBoxState);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyStartItemBoxState;
			summary.rmiName = RmiName_NotifyStartItemBoxState;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerEquipItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
int itemCID; SP_Marshaler.Read(__msg,out itemCID);	
int itemID; SP_Marshaler.Read(__msg,out itemID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerEquipItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemCID.ToString()+",";
parameterString+=itemID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerEquipItem, RmiName_NotifyPlayerEquipItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerEquipItem;
			summary.rmiName = RmiName_NotifyPlayerEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerEquipItem (remote,ctx , hostID, itemCID, itemID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerEquipItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerEquipItem;
			summary.rmiName = RmiName_NotifyPlayerEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerUnEquipItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
int itemCID; SP_Marshaler.Read(__msg,out itemCID);	
int itemID; SP_Marshaler.Read(__msg,out itemID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerUnEquipItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=itemCID.ToString()+",";
parameterString+=itemID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerUnEquipItem, RmiName_NotifyPlayerUnEquipItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerUnEquipItem;
			summary.rmiName = RmiName_NotifyPlayerUnEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerUnEquipItem (remote,ctx , hostID, itemCID, itemID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerUnEquipItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerUnEquipItem;
			summary.rmiName = RmiName_NotifyPlayerUnEquipItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletType; SP_Marshaler.Read(__msg,out bulletType);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletType.ToString()+",";
parameterString+=bulletID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletCreate, RmiName_NotifyPlayerBulletCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletCreate;
			summary.rmiName = RmiName_NotifyPlayerBulletCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletCreate (remote,ctx , sendHostID, bulletType, bulletID, pos, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletCreate;
			summary.rmiName = RmiName_NotifyPlayerBulletCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
UnityEngine.Vector3 pos; SP_Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 velocity; SP_Marshaler.Read(__msg,out velocity);	
UnityEngine.Vector3 rot; SP_Marshaler.Read(__msg,out rot);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=velocity.ToString()+",";
parameterString+=rot.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletMove, RmiName_NotifyPlayerBulletMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletMove;
			summary.rmiName = RmiName_NotifyPlayerBulletMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletMove (remote,ctx , sendHostID, bulletID, pos, velocity, rot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletMove;
			summary.rmiName = RmiName_NotifyPlayerBulletMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerBulletDelete:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string bulletID; SP_Marshaler.Read(__msg,out bulletID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerBulletDelete);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=bulletID.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerBulletDelete, RmiName_NotifyPlayerBulletDelete,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletDelete;
			summary.rmiName = RmiName_NotifyPlayerBulletDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerBulletDelete (remote,ctx , sendHostID, bulletID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerBulletDelete);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerBulletDelete;
			summary.rmiName = RmiName_NotifyPlayerBulletDelete;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerAnimation:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; SP_Marshaler.Read(__msg,out hostID);	
string name; SP_Marshaler.Read(__msg,out name);	
string animationName; SP_Marshaler.Read(__msg,out animationName);	
int aniValue; SP_Marshaler.Read(__msg,out aniValue);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerAnimation);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=animationName.ToString()+",";
parameterString+=aniValue.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerAnimation, RmiName_NotifyPlayerAnimation,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerAnimation;
			summary.rmiName = RmiName_NotifyPlayerAnimation;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerAnimation (remote,ctx , hostID, name, animationName, aniValue );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerAnimation);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerAnimation;
			summary.rmiName = RmiName_NotifyPlayerAnimation;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerChangeHP:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float hp; SP_Marshaler.Read(__msg,out hp);	
float prevhp; SP_Marshaler.Read(__msg,out prevhp);	
float maxhp; SP_Marshaler.Read(__msg,out maxhp);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerChangeHP);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=hp.ToString()+",";
parameterString+=prevhp.ToString()+",";
parameterString+=maxhp.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerChangeHP, RmiName_NotifyPlayerChangeHP,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeHP;
			summary.rmiName = RmiName_NotifyPlayerChangeHP;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerChangeHP (remote,ctx , sendHostID, name, hp, prevhp, maxhp );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeHP);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeHP;
			summary.rmiName = RmiName_NotifyPlayerChangeHP;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyPlayerChangeOxygen:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
string name; SP_Marshaler.Read(__msg,out name);	
float oxygen; SP_Marshaler.Read(__msg,out oxygen);	
float prevoxy; SP_Marshaler.Read(__msg,out prevoxy);	
float maxoxy; SP_Marshaler.Read(__msg,out maxoxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerChangeOxygen);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=oxygen.ToString()+",";
parameterString+=prevoxy.ToString()+",";
parameterString+=maxoxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyPlayerChangeOxygen, RmiName_NotifyPlayerChangeOxygen,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeOxygen;
			summary.rmiName = RmiName_NotifyPlayerChangeOxygen;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyPlayerChangeOxygen (remote,ctx , sendHostID, name, oxygen, prevoxy, maxoxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerChangeOxygen);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyPlayerChangeOxygen;
			summary.rmiName = RmiName_NotifyPlayerChangeOxygen;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyUseOxyCharger:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int oxyChargerIndex; SP_Marshaler.Read(__msg,out oxyChargerIndex);	
float userOxy; SP_Marshaler.Read(__msg,out userOxy);	
core.PostCheckReadMessage(__msg, RmiName_NotifyUseOxyCharger);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=oxyChargerIndex.ToString()+",";
parameterString+=userOxy.ToString()+",";
			NotifyCallFromStub(Common.NotifyUseOxyCharger, RmiName_NotifyUseOxyCharger,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyUseOxyCharger;
			summary.rmiName = RmiName_NotifyUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyUseOxyCharger (remote,ctx , sendHostID, oxyChargerIndex, userOxy );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyUseOxyCharger);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyUseOxyCharger;
			summary.rmiName = RmiName_NotifyUseOxyCharger;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyUseItemBox:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int itemBoxIndex; SP_Marshaler.Read(__msg,out itemBoxIndex);	
int itemID; SP_Marshaler.Read(__msg,out itemID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyUseItemBox);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=itemBoxIndex.ToString()+",";
parameterString+=itemID.ToString()+",";
			NotifyCallFromStub(Common.NotifyUseItemBox, RmiName_NotifyUseItemBox,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyUseItemBox;
			summary.rmiName = RmiName_NotifyUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyUseItemBox (remote,ctx , sendHostID, itemBoxIndex, itemID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyUseItemBox);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyUseItemBox;
			summary.rmiName = RmiName_NotifyUseItemBox;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyShelterInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int sendHostID; SP_Marshaler.Read(__msg,out sendHostID);	
int shelterID; SP_Marshaler.Read(__msg,out shelterID);	
bool doorState; SP_Marshaler.Read(__msg,out doorState);	
bool lightState; SP_Marshaler.Read(__msg,out lightState);	
core.PostCheckReadMessage(__msg, RmiName_NotifyShelterInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=sendHostID.ToString()+",";
parameterString+=shelterID.ToString()+",";
parameterString+=doorState.ToString()+",";
parameterString+=lightState.ToString()+",";
			NotifyCallFromStub(Common.NotifyShelterInfo, RmiName_NotifyShelterInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyShelterInfo;
			summary.rmiName = RmiName_NotifyShelterInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyShelterInfo (remote,ctx , sendHostID, shelterID, doorState, lightState );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyShelterInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyShelterInfo;
			summary.rmiName = RmiName_NotifyShelterInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyMeteorCreateTime:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int time; SP_Marshaler.Read(__msg,out time);	
core.PostCheckReadMessage(__msg, RmiName_NotifyMeteorCreateTime);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=time.ToString()+",";
			NotifyCallFromStub(Common.NotifyMeteorCreateTime, RmiName_NotifyMeteorCreateTime,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreateTime;
			summary.rmiName = RmiName_NotifyMeteorCreateTime;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyMeteorCreateTime (remote,ctx , time );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreateTime);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreateTime;
			summary.rmiName = RmiName_NotifyMeteorCreateTime;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyMeteorCreate:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float anglex; SP_Marshaler.Read(__msg,out anglex);	
float anglez; SP_Marshaler.Read(__msg,out anglez);	
core.PostCheckReadMessage(__msg, RmiName_NotifyMeteorCreate);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=anglex.ToString()+",";
parameterString+=anglez.ToString()+",";
			NotifyCallFromStub(Common.NotifyMeteorCreate, RmiName_NotifyMeteorCreate,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreate;
			summary.rmiName = RmiName_NotifyMeteorCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyMeteorCreate (remote,ctx , anglex, anglez );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyMeteorCreate);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyMeteorCreate;
			summary.rmiName = RmiName_NotifyMeteorCreate;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifySpaceShipEngineCharge:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int spaceShipID; SP_Marshaler.Read(__msg,out spaceShipID);	
float fuel; SP_Marshaler.Read(__msg,out fuel);	
core.PostCheckReadMessage(__msg, RmiName_NotifySpaceShipEngineCharge);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=spaceShipID.ToString()+",";
parameterString+=fuel.ToString()+",";
			NotifyCallFromStub(Common.NotifySpaceShipEngineCharge, RmiName_NotifySpaceShipEngineCharge,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifySpaceShipEngineCharge;
			summary.rmiName = RmiName_NotifySpaceShipEngineCharge;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifySpaceShipEngineCharge (remote,ctx , spaceShipID, fuel );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifySpaceShipEngineCharge);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifySpaceShipEngineCharge;
			summary.rmiName = RmiName_NotifySpaceShipEngineCharge;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestGameEnd:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int winPlayerID; SP_Marshaler.Read(__msg,out winPlayerID);	
core.PostCheckReadMessage(__msg, RmiName_RequestGameEnd);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=winPlayerID.ToString()+",";
			NotifyCallFromStub(Common.RequestGameEnd, RmiName_RequestGameEnd,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestGameEnd;
			summary.rmiName = RmiName_RequestGameEnd;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestGameEnd (remote,ctx , winPlayerID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestGameEnd);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestGameEnd;
			summary.rmiName = RmiName_RequestGameEnd;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyKillInfo:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string targetName; SP_Marshaler.Read(__msg,out targetName);	
bool kill; SP_Marshaler.Read(__msg,out kill);	
int totalKill; SP_Marshaler.Read(__msg,out totalKill);	
int totalAssist; SP_Marshaler.Read(__msg,out totalAssist);	
core.PostCheckReadMessage(__msg, RmiName_NotifyKillInfo);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=targetName.ToString()+",";
parameterString+=kill.ToString()+",";
parameterString+=totalKill.ToString()+",";
parameterString+=totalAssist.ToString()+",";
			NotifyCallFromStub(Common.NotifyKillInfo, RmiName_NotifyKillInfo,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyKillInfo;
			summary.rmiName = RmiName_NotifyKillInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyKillInfo (remote,ctx , targetName, kill, totalKill, totalAssist );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyKillInfo);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyKillInfo;
			summary.rmiName = RmiName_NotifyKillInfo;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultInfoMe:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string gameMode; SP_Marshaler.Read(__msg,out gameMode);	
int winState; SP_Marshaler.Read(__msg,out winState);	
int playTime; SP_Marshaler.Read(__msg,out playTime);	
int kills; SP_Marshaler.Read(__msg,out kills);	
int assists; SP_Marshaler.Read(__msg,out assists);	
int death; SP_Marshaler.Read(__msg,out death);	
int getMoney; SP_Marshaler.Read(__msg,out getMoney);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultInfoMe);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=gameMode.ToString()+",";
parameterString+=winState.ToString()+",";
parameterString+=playTime.ToString()+",";
parameterString+=kills.ToString()+",";
parameterString+=assists.ToString()+",";
parameterString+=death.ToString()+",";
parameterString+=getMoney.ToString()+",";
			NotifyCallFromStub(Common.NotifyGameResultInfoMe, RmiName_NotifyGameResultInfoMe,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoMe;
			summary.rmiName = RmiName_NotifyGameResultInfoMe;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultInfoMe (remote,ctx , gameMode, winState, playTime, kills, assists, death, getMoney );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoMe);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoMe;
			summary.rmiName = RmiName_NotifyGameResultInfoMe;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultInfoOther:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		string name; SP_Marshaler.Read(__msg,out name);	
int state; SP_Marshaler.Read(__msg,out state);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultInfoOther);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=name.ToString()+",";
parameterString+=state.ToString()+",";
			NotifyCallFromStub(Common.NotifyGameResultInfoOther, RmiName_NotifyGameResultInfoOther,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoOther;
			summary.rmiName = RmiName_NotifyGameResultInfoOther;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultInfoOther (remote,ctx , name, state );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultInfoOther);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultInfoOther;
			summary.rmiName = RmiName_NotifyGameResultInfoOther;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyGameResultShow:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyGameResultShow);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyGameResultShow, RmiName_NotifyGameResultShow,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyGameResultShow;
			summary.rmiName = RmiName_NotifyGameResultShow;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyGameResultShow (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyGameResultShow);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyGameResultShow;
			summary.rmiName = RmiName_NotifyGameResultShow;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerConnect="RequestServerConnect";
const string RmiName_RequestClientJoin="RequestClientJoin";
const string RmiName_RequestWorldCreateItem="RequestWorldCreateItem";
const string RmiName_RequestPlayerDamage="RequestPlayerDamage";
const string RmiName_RequestPlayerUseOxy="RequestPlayerUseOxy";
const string RmiName_RequestUseOxyCharger="RequestUseOxyCharger";
const string RmiName_RequestUseItemBox="RequestUseItemBox";
const string RmiName_RequestShelterStartSetup="RequestShelterStartSetup";
const string RmiName_RequestShelterDoorControl="RequestShelterDoorControl";
const string RmiName_RequestShelterEnter="RequestShelterEnter";
const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
const string RmiName_NotifyOtherClientJoin="NotifyOtherClientJoin";
const string RmiName_NotifyPlayerLost="NotifyPlayerLost";
const string RmiName_NotifyPlayerMove="NotifyPlayerMove";
const string RmiName_NotifyDeleteItem="NotifyDeleteItem";
const string RmiName_NotifyCreateItem="NotifyCreateItem";
const string RmiName_NotifyStartOxyChargerState="NotifyStartOxyChargerState";
const string RmiName_NotifyStartItemBoxState="NotifyStartItemBoxState";
const string RmiName_NotifyPlayerEquipItem="NotifyPlayerEquipItem";
const string RmiName_NotifyPlayerUnEquipItem="NotifyPlayerUnEquipItem";
const string RmiName_NotifyPlayerBulletCreate="NotifyPlayerBulletCreate";
const string RmiName_NotifyPlayerBulletMove="NotifyPlayerBulletMove";
const string RmiName_NotifyPlayerBulletDelete="NotifyPlayerBulletDelete";
const string RmiName_NotifyPlayerAnimation="NotifyPlayerAnimation";
const string RmiName_NotifyPlayerChangeHP="NotifyPlayerChangeHP";
const string RmiName_NotifyPlayerChangeOxygen="NotifyPlayerChangeOxygen";
const string RmiName_NotifyUseOxyCharger="NotifyUseOxyCharger";
const string RmiName_NotifyUseItemBox="NotifyUseItemBox";
const string RmiName_NotifyShelterInfo="NotifyShelterInfo";
const string RmiName_NotifyMeteorCreateTime="NotifyMeteorCreateTime";
const string RmiName_NotifyMeteorCreate="NotifyMeteorCreate";
const string RmiName_NotifySpaceShipEngineCharge="NotifySpaceShipEngineCharge";
const string RmiName_RequestGameEnd="RequestGameEnd";
const string RmiName_NotifyKillInfo="NotifyKillInfo";
const string RmiName_NotifyGameResultInfoMe="NotifyGameResultInfoMe";
const string RmiName_NotifyGameResultInfoOther="NotifyGameResultInfoOther";
const string RmiName_NotifyGameResultShow="NotifyGameResultShow";
       
const string RmiName_First = RmiName_RequestServerConnect;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerConnect="";
const string RmiName_RequestClientJoin="";
const string RmiName_RequestWorldCreateItem="";
const string RmiName_RequestPlayerDamage="";
const string RmiName_RequestPlayerUseOxy="";
const string RmiName_RequestUseOxyCharger="";
const string RmiName_RequestUseItemBox="";
const string RmiName_RequestShelterStartSetup="";
const string RmiName_RequestShelterDoorControl="";
const string RmiName_RequestShelterEnter="";
const string RmiName_NotifyLoginSuccess="";
const string RmiName_NotifyLoginFailed="";
const string RmiName_NotifyOtherClientJoin="";
const string RmiName_NotifyPlayerLost="";
const string RmiName_NotifyPlayerMove="";
const string RmiName_NotifyDeleteItem="";
const string RmiName_NotifyCreateItem="";
const string RmiName_NotifyStartOxyChargerState="";
const string RmiName_NotifyStartItemBoxState="";
const string RmiName_NotifyPlayerEquipItem="";
const string RmiName_NotifyPlayerUnEquipItem="";
const string RmiName_NotifyPlayerBulletCreate="";
const string RmiName_NotifyPlayerBulletMove="";
const string RmiName_NotifyPlayerBulletDelete="";
const string RmiName_NotifyPlayerAnimation="";
const string RmiName_NotifyPlayerChangeHP="";
const string RmiName_NotifyPlayerChangeOxygen="";
const string RmiName_NotifyUseOxyCharger="";
const string RmiName_NotifyUseItemBox="";
const string RmiName_NotifyShelterInfo="";
const string RmiName_NotifyMeteorCreateTime="";
const string RmiName_NotifyMeteorCreate="";
const string RmiName_NotifySpaceShipEngineCharge="";
const string RmiName_RequestGameEnd="";
const string RmiName_NotifyKillInfo="";
const string RmiName_NotifyGameResultInfoMe="";
const string RmiName_NotifyGameResultInfoOther="";
const string RmiName_NotifyGameResultShow="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

